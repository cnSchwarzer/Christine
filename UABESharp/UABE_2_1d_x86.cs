// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace UABESharp
{
    public enum PluginAction
    {
        PluginActionIMPORT = 0,
        PluginActionEXPORT = 1,
        PluginActionIMPORT_Batch = 2,
        PluginActionEXPORT_Batch = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr AssetPluginGetPluginInfoCallbackDelegate();

    public unsafe abstract partial class IAssetInterface : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IAssetInterface;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IAssetInterface@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IAssetInterface@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.IAssetInterface> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.IAssetInterface>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.IAssetInterface __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.IAssetInterfaceInternal(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.IAssetInterface __CreateInstance(global::UABESharp.IAssetInterface.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.IAssetInterfaceInternal(native, skipVTables);
        }

        protected IAssetInterface(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected IAssetInterface()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.IAssetInterface.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.IAssetInterface");
        }

        protected IAssetInterface(global::UABESharp.IAssetInterface _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.IAssetInterface.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.IAssetInterface");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.IAssetInterface __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::UABESharp.IAssetInterface.__Internal*) __Instance)->vfptr_IAssetInterface = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract int GetAbsoluteFileID(int referenceFileID);

        public abstract ulong GetFileReader(global::UABESharp.AssetsFileReaderDelegate reader, ref int readerPar, ref ulong filePos);

        public abstract void FreeFileReader(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar);

        public abstract int ClassID
        {
            get;
        }

        public abstract ushort MonoClassID
        {
            get;
        }

        public abstract long PathID
        {
            get;
        }

        public abstract int FileID
        {
            get;
        }

        public abstract global::UABESharp.AssetsFile AssetsFile
        {
            get;
        }

        public abstract string AssetsFileBasePath
        {
            get;
        }

        public abstract string AssetsFileName
        {
            get;
        }

        #region Virtual table interop

        // int GetClassID()=0
        private static global::UABESharp.Delegates.Func_int_IntPtr _GetClassIDDelegateInstance;

        private static int _GetClassIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ClassID;
            return __ret;
        }

        // unsigned short GetMonoClassID()=0
        private static global::UABESharp.Delegates.Func_ushort_IntPtr _GetMonoClassIDDelegateInstance;

        private static ushort _GetMonoClassIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MonoClassID;
            return __ret;
        }

        // __int64 GetPathID()=0
        private static global::UABESharp.Delegates.Func_long_IntPtr _GetPathIDDelegateInstance;

        private static long _GetPathIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.PathID;
            return __ret;
        }

        // int GetFileID()=0
        private static global::UABESharp.Delegates.Func_int_IntPtr _GetFileIDDelegateInstance;

        private static int _GetFileIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FileID;
            return __ret;
        }

        // int GetAbsoluteFileID(int referenceFileID)=0
        private static global::UABESharp.Delegates.Func_int_IntPtr_int _GetAbsoluteFileIDDelegateInstance;

        private static int _GetAbsoluteFileIDDelegateHook(global::System.IntPtr instance, int referenceFileID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetAbsoluteFileID(referenceFileID);
            return __ret;
        }

        // AssetsFile *GetAssetsFile()=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetAssetsFileDelegateInstance;

        private static global::System.IntPtr _GetAssetsFileDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AssetsFile;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // char *GetAssetsFileBasePath()=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetAssetsFileBasePathDelegateInstance;

        private static global::System.IntPtr _GetAssetsFileBasePathDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AssetsFileBasePath;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // char *GetAssetsFileName()=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetAssetsFileNameDelegateInstance;

        private static global::System.IntPtr _GetAssetsFileNameDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AssetsFileName;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // unsigned __int64 GetFileReader(AssetsFileReader &reader, LPARAM &readerPar, unsigned __int64 &filePos)=0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr_IntPtr_intPtr_ulongPtr _GetFileReaderDelegateInstance;

        private static ulong _GetFileReaderDelegateHook(global::System.IntPtr instance, global::System.IntPtr reader, int* readerPar, ulong* filePos)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr0 = reader;
            var __ret = __target.GetFileReader(__ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate)), ref *readerPar, ref *filePos);
            return __ret;
        }

        // void FreeFileReader(AssetsFileReader reader, LPARAM readerPar)=0
        private static global::UABESharp.Delegates.Action_IntPtr_IntPtr_int _FreeFileReaderDelegateInstance;

        private static void _FreeFileReaderDelegateHook(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IAssetInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr0 = reader;
            __target.FreeFileReader(__ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate)), readerPar);
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[10];
                _GetClassIDDelegateInstance += _GetClassIDDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassIDDelegateInstance).ToPointer();
                _GetMonoClassIDDelegateInstance += _GetMonoClassIDDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetMonoClassIDDelegateInstance).ToPointer();
                _GetPathIDDelegateInstance += _GetPathIDDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetPathIDDelegateInstance).ToPointer();
                _GetFileIDDelegateInstance += _GetFileIDDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetFileIDDelegateInstance).ToPointer();
                _GetAbsoluteFileIDDelegateInstance += _GetAbsoluteFileIDDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetAbsoluteFileIDDelegateInstance).ToPointer();
                _GetAssetsFileDelegateInstance += _GetAssetsFileDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetAssetsFileDelegateInstance).ToPointer();
                _GetAssetsFileBasePathDelegateInstance += _GetAssetsFileBasePathDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetAssetsFileBasePathDelegateInstance).ToPointer();
                _GetAssetsFileNameDelegateInstance += _GetAssetsFileNameDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetAssetsFileNameDelegateInstance).ToPointer();
                _GetFileReaderDelegateInstance += _GetFileReaderDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetFileReaderDelegateInstance).ToPointer();
                _FreeFileReaderDelegateInstance += _FreeFileReaderDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_FreeFileReaderDelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(10 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe abstract partial class IPluginInterface : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IPluginInterface;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IPluginInterface@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IPluginInterface@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.IPluginInterface> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.IPluginInterface>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.IPluginInterface __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.IPluginInterfaceInternal(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.IPluginInterface __CreateInstance(global::UABESharp.IPluginInterface.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.IPluginInterfaceInternal(native, skipVTables);
        }

        protected IPluginInterface(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected IPluginInterface()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.IPluginInterface.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.IPluginInterface");
        }

        protected IPluginInterface(global::UABESharp.IPluginInterface _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.IPluginInterface.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.IPluginInterface");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.IPluginInterface __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::UABESharp.IPluginInterface.__Internal*) __Instance)->vfptr_IPluginInterface = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract global::UABESharp.AssetsFile GetAssetsFileByFileID(int fileID);

        public abstract global::UABESharp.AssetsBundleFile GetBundleFileByName(string bundleName, uint strLen);

        public abstract bool OpenStreamedData(string name, ulong offset, ulong length, global::UABESharp.AssetsFileReaderDelegate reader, ref int readerPar);

        public abstract void CloseStreamedData(int dataPar);

        public abstract void AddReplacer(global::UABESharp.AssetsReplacer pReplacer);

        public abstract bool MakeTemplateField(global::UABESharp.AssetsFile pAssetsFile, int classID, global::UABESharp.AssetTypeTemplateField pTemplateBase, ushort scriptIndex);

        public abstract int GetClassByName(global::UABESharp.AssetsFile pAssetsFile, string name);

        public abstract void GetTypenameA(global::UABESharp.AssetsFile pAssetsFile, int classID, sbyte* nameBuffer, uint bufferLen);

        public abstract void GetTypenameW(global::UABESharp.AssetsFile pAssetsFile, int classID, char* nameBuffer, uint bufferLen);

        public abstract void FreeCOMFilePathBuf(char** filePathBuf);

        public abstract void FreeUTF8DialogBuf(sbyte** filePathBuf);

        public abstract sbyte* MakeExportFileName(sbyte* outFolder, string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, string extension);

        public abstract char* MakeExportFileNameW(sbyte* outFolder, string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, string extension);

        public abstract void MemFree(global::System.IntPtr buf);

        public abstract global::System.IntPtr FopenUTF8(string fileName, string mode);

        public abstract int FopenUTF8S(global::System.IntPtr ppFile, string fileName, string mode);

        public abstract global::UABESharp.AssetsBundleFile BundleFile
        {
            get;
        }

        public abstract global::System.IntPtr BundleFileFile
        {
            get;
        }

        #region Virtual table interop

        // AssetsFile *GetAssetsFileByFileID(int fileID)=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr_int _GetAssetsFileByFileIDDelegateInstance;

        private static global::System.IntPtr _GetAssetsFileByFileIDDelegateHook(global::System.IntPtr instance, int fileID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetAssetsFileByFileID(fileID);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // AssetsBundleFile *GetBundleFileByName(const char *bundleName, size_t strLen = 0)=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_uint _GetBundleFileByNameDelegateInstance;

        private static global::System.IntPtr _GetBundleFileByNameDelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string bundleName, uint strLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetBundleFileByName(bundleName, strLen);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // AssetsBundleFile *GetBundleFile()=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetBundleFileDelegateInstance;

        private static global::System.IntPtr _GetBundleFileDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.BundleFile;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // FILE *GetBundleFileFile()=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetBundleFileFileDelegateInstance;

        private static global::System.IntPtr _GetBundleFileFileDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.BundleFileFile;
            return __ret;
        }

        // bool OpenStreamedData(const char *name, QWORD offset, QWORD length, AssetsFileReader &reader, LPARAM &readerPar)=0
        private static global::UABESharp.Delegates.Func_bool_IntPtr_string_ulong_ulong_IntPtr_intPtr _OpenStreamedDataDelegateInstance;

        private static bool _OpenStreamedDataDelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name, ulong offset, ulong length, global::System.IntPtr reader, int* readerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr3 = reader;
            var __ret = __target.OpenStreamedData(name, offset, length, __ptr3 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr3, typeof(global::UABESharp.AssetsFileReaderDelegate)), ref *readerPar);
            return __ret;
        }

        // void CloseStreamedData(LPARAM dataPar)=0
        private static global::UABESharp.Delegates.Action_IntPtr_int _CloseStreamedDataDelegateInstance;

        private static void _CloseStreamedDataDelegateHook(global::System.IntPtr instance, int dataPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.CloseStreamedData(dataPar);
        }

        // void AddReplacer(AssetsReplacer *pReplacer)=0
        private static global::UABESharp.Delegates.Action_IntPtr_IntPtr _AddReplacerDelegateInstance;

        private static void _AddReplacerDelegateHook(global::System.IntPtr instance, global::System.IntPtr pReplacer)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsReplacer __result0;
            if (pReplacer == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(pReplacer))
                __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[pReplacer];
            else __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(pReplacer, skipVTables: true);
            __target.AddReplacer(__result0);
        }

        // bool MakeTemplateField(AssetsFile *pAssetsFile, int classID, AssetTypeTemplateField *pTemplateBase, WORD scriptIndex = 0xFFFF)=0
        private static global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_int_IntPtr_ushort _MakeTemplateFieldDelegateInstance;

        private static bool _MakeTemplateFieldDelegateHook(global::System.IntPtr instance, global::System.IntPtr pAssetsFile, int classID, global::System.IntPtr pTemplateBase, ushort scriptIndex)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsFile __result0;
            if (pAssetsFile == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(pAssetsFile))
                __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[pAssetsFile];
            else __result0 = global::UABESharp.AssetsFile.__CreateInstance(pAssetsFile);
            global::UABESharp.AssetTypeTemplateField __result2;
            if (pTemplateBase == IntPtr.Zero) __result2 = null;
            else if (global::UABESharp.AssetTypeTemplateField.NativeToManagedMap.ContainsKey(pTemplateBase))
                __result2 = (global::UABESharp.AssetTypeTemplateField) global::UABESharp.AssetTypeTemplateField.NativeToManagedMap[pTemplateBase];
            else __result2 = global::UABESharp.AssetTypeTemplateField.__CreateInstance(pTemplateBase);
            var __ret = __target.MakeTemplateField(__result0, classID, __result2, scriptIndex);
            return __ret;
        }

        // int GetClassByName(AssetsFile *pAssetsFile, const char *name)=0
        private static global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string _GetClassByNameDelegateInstance;

        private static int _GetClassByNameDelegateHook(global::System.IntPtr instance, global::System.IntPtr pAssetsFile, [MarshalAs(UnmanagedType.LPStr)] string name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsFile __result0;
            if (pAssetsFile == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(pAssetsFile))
                __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[pAssetsFile];
            else __result0 = global::UABESharp.AssetsFile.__CreateInstance(pAssetsFile);
            var __ret = __target.GetClassByName(__result0, name);
            return __ret;
        }

        // void GetTypenameA(AssetsFile *pAssetsFile, int classID, char *nameBuffer, unsigned int bufferLen)=0
        private static global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_sbytePtr_uint _GetTypenameADelegateInstance;

        private static void _GetTypenameADelegateHook(global::System.IntPtr instance, global::System.IntPtr pAssetsFile, int classID, sbyte* nameBuffer, uint bufferLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsFile __result0;
            if (pAssetsFile == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(pAssetsFile))
                __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[pAssetsFile];
            else __result0 = global::UABESharp.AssetsFile.__CreateInstance(pAssetsFile);
            __target.GetTypenameA(__result0, classID, nameBuffer, bufferLen);
        }

        // void GetTypenameW(AssetsFile *pAssetsFile, int classID, wchar_t *nameBuffer, unsigned int bufferLen)=0
        private static global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_charPtr_uint _GetTypenameWDelegateInstance;

        private static void _GetTypenameWDelegateHook(global::System.IntPtr instance, global::System.IntPtr pAssetsFile, int classID, char* nameBuffer, uint bufferLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsFile __result0;
            if (pAssetsFile == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(pAssetsFile))
                __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[pAssetsFile];
            else __result0 = global::UABESharp.AssetsFile.__CreateInstance(pAssetsFile);
            __target.GetTypenameW(__result0, classID, nameBuffer, bufferLen);
        }

        // void FreeCOMFilePathBuf(WCHAR **filePathBuf)=0
        private static global::UABESharp.Delegates.Action_IntPtr_charPtrPtr _FreeCOMFilePathBufDelegateInstance;

        private static void _FreeCOMFilePathBufDelegateHook(global::System.IntPtr instance, char** filePathBuf)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.FreeCOMFilePathBuf(filePathBuf);
        }

        // void FreeUTF8DialogBuf(CHAR **filePathBuf)=0
        private static global::UABESharp.Delegates.Action_IntPtr_sbytePtrPtr _FreeUTF8DialogBufDelegateInstance;

        private static void _FreeUTF8DialogBufDelegateHook(global::System.IntPtr instance, sbyte** filePathBuf)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.FreeUTF8DialogBuf(filePathBuf);
        }

        // char *MakeExportFileName(char *outFolder, const char *assetName, int fileId, __int64 pathId, char **previousFileNames, size_t index, size_t count, const char *extension)=0
        private static global::UABESharp.Delegates.Func_sbytePtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string _MakeExportFileNameDelegateInstance;

        private static sbyte* _MakeExportFileNameDelegateHook(global::System.IntPtr instance, sbyte* outFolder, [MarshalAs(UnmanagedType.LPStr)] string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, [MarshalAs(UnmanagedType.LPStr)] string extension)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MakeExportFileName(outFolder, assetName, fileId, pathId, previousFileNames, index, count, extension);
            return __ret;
        }

        // WCHAR *MakeExportFileNameW(char *outFolder, const char *assetName, int fileId, __int64 pathId, char **previousFileNames, size_t index, size_t count, const char *extension)=0
        private static global::UABESharp.Delegates.Func_charPtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string _MakeExportFileNameWDelegateInstance;

        private static char* _MakeExportFileNameWDelegateHook(global::System.IntPtr instance, sbyte* outFolder, [MarshalAs(UnmanagedType.LPStr)] string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, [MarshalAs(UnmanagedType.LPStr)] string extension)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MakeExportFileNameW(outFolder, assetName, fileId, pathId, previousFileNames, index, count, extension);
            return __ret;
        }

        // void MemFree(void *buf)=0
        private static global::UABESharp.Delegates.Action_IntPtr_IntPtr _MemFreeDelegateInstance;

        private static void _MemFreeDelegateHook(global::System.IntPtr instance, global::System.IntPtr buf)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MemFree(buf);
        }

        // FILE *fopenUTF8(const char *fileName, const char *mode)=0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_string _FopenUTF8DelegateInstance;

        private static global::System.IntPtr _FopenUTF8DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string fileName, [MarshalAs(UnmanagedType.LPStr)] string mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FopenUTF8(fileName, mode);
            return __ret;
        }

        // errno_t fopenUTF8_s(FILE** ppFile, const char *fileName, const char *mode)=0
        private static global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string_string _FopenUTF8SDelegateInstance;

        private static int _FopenUTF8SDelegateHook(global::System.IntPtr instance, global::System.IntPtr ppFile, [MarshalAs(UnmanagedType.LPStr)] string fileName, [MarshalAs(UnmanagedType.LPStr)] string mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.IPluginInterface) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FopenUTF8S(ppFile, fileName, mode);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[18];
                _GetAssetsFileByFileIDDelegateInstance += _GetAssetsFileByFileIDDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetAssetsFileByFileIDDelegateInstance).ToPointer();
                _GetBundleFileByNameDelegateInstance += _GetBundleFileByNameDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetBundleFileByNameDelegateInstance).ToPointer();
                _GetBundleFileDelegateInstance += _GetBundleFileDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetBundleFileDelegateInstance).ToPointer();
                _GetBundleFileFileDelegateInstance += _GetBundleFileFileDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetBundleFileFileDelegateInstance).ToPointer();
                _OpenStreamedDataDelegateInstance += _OpenStreamedDataDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OpenStreamedDataDelegateInstance).ToPointer();
                _CloseStreamedDataDelegateInstance += _CloseStreamedDataDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_CloseStreamedDataDelegateInstance).ToPointer();
                _AddReplacerDelegateInstance += _AddReplacerDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_AddReplacerDelegateInstance).ToPointer();
                _MakeTemplateFieldDelegateInstance += _MakeTemplateFieldDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_MakeTemplateFieldDelegateInstance).ToPointer();
                _GetClassByNameDelegateInstance += _GetClassByNameDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetClassByNameDelegateInstance).ToPointer();
                _GetTypenameADelegateInstance += _GetTypenameADelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetTypenameADelegateInstance).ToPointer();
                _GetTypenameWDelegateInstance += _GetTypenameWDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetTypenameWDelegateInstance).ToPointer();
                _FreeCOMFilePathBufDelegateInstance += _FreeCOMFilePathBufDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_FreeCOMFilePathBufDelegateInstance).ToPointer();
                _FreeUTF8DialogBufDelegateInstance += _FreeUTF8DialogBufDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_FreeUTF8DialogBufDelegateInstance).ToPointer();
                _MakeExportFileNameDelegateInstance += _MakeExportFileNameDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_MakeExportFileNameDelegateInstance).ToPointer();
                _MakeExportFileNameWDelegateInstance += _MakeExportFileNameWDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_MakeExportFileNameWDelegateInstance).ToPointer();
                _MemFreeDelegateInstance += _MemFreeDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_MemFreeDelegateInstance).ToPointer();
                _FopenUTF8DelegateInstance += _FopenUTF8DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_FopenUTF8DelegateInstance).ToPointer();
                _FopenUTF8SDelegateInstance += _FopenUTF8SDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_FopenUTF8SDelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(22 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
                *(void**) (vfptr0 + 40) = _Thunks[10];
                *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                *(void**) (vfptr0 + 56) = _Thunks[11];
                *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                *(void**) (vfptr0 + 64) = _Thunks[12];
                *(void**) (vfptr0 + 68) = _Thunks[13];
                *(void**) (vfptr0 + 72) = _Thunks[14];
                *(void**) (vfptr0 + 76) = _Thunks[15];
                *(void**) (vfptr0 + 80) = _Thunks[16];
                *(void**) (vfptr0 + 84) = _Thunks[17];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe partial class PluginInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte name[64];

            [FieldOffset(64)]
            internal uint optionCount;

            [FieldOffset(68)]
            internal global::System.IntPtr options;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0PluginInfo@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PluginInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PluginInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.PluginInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.PluginInfo(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.PluginInfo __CreateInstance(global::UABESharp.PluginInfo.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.PluginInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.PluginInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginInfo.__Internal));
            *(global::UABESharp.PluginInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PluginInfo(global::UABESharp.PluginInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PluginInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PluginInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PluginInfo(global::UABESharp.PluginInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.PluginInfo.__Internal*) __Instance) = *((global::UABESharp.PluginInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.PluginInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.PluginInfo.__Internal*) __Instance)->name != null)
                {
                    __value = new sbyte[64];
                    for (int i = 0; i < 64; i++)
                        __value[i] = ((global::UABESharp.PluginInfo.__Internal*) __Instance)->name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((global::UABESharp.PluginInfo.__Internal*)__Instance)->name[i] = value[i];
                }
            }
        }

        public uint OptionCount
        {
            get
            {
                return ((global::UABESharp.PluginInfo.__Internal*) __Instance)->optionCount;
            }

            set
            {
                ((global::UABESharp.PluginInfo.__Internal*)__Instance)->optionCount = value;
            }
        }
    }

    public unsafe partial class PluginAssetOption : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 268)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte desc[256];

            [FieldOffset(256)]
            internal int unityClassID;

            [FieldOffset(260)]
            internal global::UABESharp.PluginAction action;

            [FieldOffset(264)]
            internal global::System.IntPtr callback;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0PluginAssetOption@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PluginAssetOption> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PluginAssetOption>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.PluginAssetOption __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.PluginAssetOption(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.PluginAssetOption __CreateInstance(global::UABESharp.PluginAssetOption.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.PluginAssetOption(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.PluginAssetOption.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginAssetOption.__Internal));
            *(global::UABESharp.PluginAssetOption.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PluginAssetOption(global::UABESharp.PluginAssetOption.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PluginAssetOption(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PluginAssetOption()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginAssetOption.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PluginAssetOption(global::UABESharp.PluginAssetOption _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PluginAssetOption.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.PluginAssetOption.__Internal*) __Instance) = *((global::UABESharp.PluginAssetOption.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.PluginAssetOption __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] Desc
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.PluginAssetOption.__Internal*) __Instance)->desc != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::UABESharp.PluginAssetOption.__Internal*) __Instance)->desc[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::UABESharp.PluginAssetOption.__Internal*)__Instance)->desc[i] = value[i];
                }
            }
        }

        public int UnityClassID
        {
            get
            {
                return ((global::UABESharp.PluginAssetOption.__Internal*) __Instance)->unityClassID;
            }

            set
            {
                ((global::UABESharp.PluginAssetOption.__Internal*)__Instance)->unityClassID = value;
            }
        }

        public global::UABESharp.PluginAction Action
        {
            get
            {
                return ((global::UABESharp.PluginAssetOption.__Internal*) __Instance)->action;
            }

            set
            {
                ((global::UABESharp.PluginAssetOption.__Internal*)__Instance)->action = value;
            }
        }
    }

    public unsafe partial class IAssetInterfaceInternal : global::UABESharp.IAssetInterface, IDisposable
    {
        private static void* __CopyValue(global::UABESharp.IAssetInterface.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.IAssetInterface.__Internal));
            *(global::UABESharp.IAssetInterface.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IAssetInterfaceInternal(global::UABESharp.IAssetInterface.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal IAssetInterfaceInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override int GetAbsoluteFileID(int referenceFileID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___GetAbsoluteFileIDDelegate = (global::UABESharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetAbsoluteFileIDDelegate((__Instance + __PointerAdjustment), referenceFileID);
            return __ret;
        }

        public override ulong GetFileReader(global::UABESharp.AssetsFileReaderDelegate reader, ref int readerPar, ref ulong filePos)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___GetFileReaderDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr_IntPtr_intPtr_ulongPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr_IntPtr_intPtr_ulongPtr));
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (int* __refParamPtr1 = &readerPar)
            {
                var __arg1 = __refParamPtr1;
                fixed (ulong* __refParamPtr2 = &filePos)
                {
                    var __arg2 = __refParamPtr2;
                    var __ret = ___GetFileReaderDelegate((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public override void FreeFileReader(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___FreeFileReaderDelegate = (global::UABESharp.Delegates.Action_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_IntPtr_int));
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            ___FreeFileReaderDelegate((__Instance + __PointerAdjustment), __arg0, readerPar);
        }

        public override int ClassID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___GetClassIDDelegate = (global::UABESharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr));
                var __ret = ___GetClassIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override ushort MonoClassID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___GetMonoClassIDDelegate = (global::UABESharp.Delegates.Func_ushort_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ushort_IntPtr));
                var __ret = ___GetMonoClassIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override long PathID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
                var ___GetPathIDDelegate = (global::UABESharp.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_long_IntPtr));
                var __ret = ___GetPathIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override int FileID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetFileIDDelegate = (global::UABESharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr));
                var __ret = ___GetFileIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override global::UABESharp.AssetsFile AssetsFile
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
                var ___GetAssetsFileDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetAssetsFileDelegate((__Instance + __PointerAdjustment));
                global::UABESharp.AssetsFile __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetsFile.__CreateInstance(__ret);
                return __result0;
            }
        }

        public override string AssetsFileBasePath
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
                var ___GetAssetsFileBasePathDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetAssetsFileBasePathDelegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public override string AssetsFileName
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
                var ___GetAssetsFileNameDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetAssetsFileNameDelegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }

    public unsafe partial class IPluginInterfaceInternal : global::UABESharp.IPluginInterface, IDisposable
    {
        private static void* __CopyValue(global::UABESharp.IPluginInterface.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.IPluginInterface.__Internal));
            *(global::UABESharp.IPluginInterface.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPluginInterfaceInternal(global::UABESharp.IPluginInterface.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal IPluginInterfaceInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override global::UABESharp.AssetsFile GetAssetsFileByFileID(int fileID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___GetAssetsFileByFileIDDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr_int));
            var __ret = ___GetAssetsFileByFileIDDelegate((__Instance + __PointerAdjustment), fileID);
            global::UABESharp.AssetsFile __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetsFile.__CreateInstance(__ret);
            return __result0;
        }

        public override global::UABESharp.AssetsBundleFile GetBundleFileByName(string bundleName, uint strLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___GetBundleFileByNameDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_uint));
            var __ret = ___GetBundleFileByNameDelegate((__Instance + __PointerAdjustment), bundleName, strLen);
            global::UABESharp.AssetsBundleFile __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsBundleFile.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsBundleFile) global::UABESharp.AssetsBundleFile.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetsBundleFile.__CreateInstance(__ret);
            return __result0;
        }

        public override bool OpenStreamedData(string name, ulong offset, ulong length, global::UABESharp.AssetsFileReaderDelegate reader, ref int readerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___OpenStreamedDataDelegate = (global::UABESharp.Delegates.Func_bool_IntPtr_string_ulong_ulong_IntPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_bool_IntPtr_string_ulong_ulong_IntPtr_intPtr));
            var __arg3 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (int* __refParamPtr4 = &readerPar)
            {
                var __arg4 = __refParamPtr4;
                var __ret = ___OpenStreamedDataDelegate((__Instance + __PointerAdjustment), name, offset, length, __arg3, __arg4);
                return __ret;
            }
        }

        public override void CloseStreamedData(int dataPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloseStreamedDataDelegate = (global::UABESharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_int));
            ___CloseStreamedDataDelegate((__Instance + __PointerAdjustment), dataPar);
        }

        public override void AddReplacer(global::UABESharp.AssetsReplacer pReplacer)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___AddReplacerDelegate = (global::UABESharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(pReplacer, null) ? global::System.IntPtr.Zero : pReplacer.__Instance;
            ___AddReplacerDelegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override bool MakeTemplateField(global::UABESharp.AssetsFile pAssetsFile, int classID, global::UABESharp.AssetTypeTemplateField pTemplateBase, ushort scriptIndex)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___MakeTemplateFieldDelegate = (global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_int_IntPtr_ushort) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_int_IntPtr_ushort));
            var __arg0 = ReferenceEquals(pAssetsFile, null) ? global::System.IntPtr.Zero : pAssetsFile.__Instance;
            var __arg2 = ReferenceEquals(pTemplateBase, null) ? global::System.IntPtr.Zero : pTemplateBase.__Instance;
            var __ret = ___MakeTemplateFieldDelegate((__Instance + __PointerAdjustment), __arg0, classID, __arg2, scriptIndex);
            return __ret;
        }

        public override int GetClassByName(global::UABESharp.AssetsFile pAssetsFile, string name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___GetClassByNameDelegate = (global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string));
            var __arg0 = ReferenceEquals(pAssetsFile, null) ? global::System.IntPtr.Zero : pAssetsFile.__Instance;
            var __ret = ___GetClassByNameDelegate((__Instance + __PointerAdjustment), __arg0, name);
            return __ret;
        }

        public override void GetTypenameA(global::UABESharp.AssetsFile pAssetsFile, int classID, sbyte* nameBuffer, uint bufferLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___GetTypenameADelegate = (global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_sbytePtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_sbytePtr_uint));
            var __arg0 = ReferenceEquals(pAssetsFile, null) ? global::System.IntPtr.Zero : pAssetsFile.__Instance;
            ___GetTypenameADelegate((__Instance + __PointerAdjustment), __arg0, classID, nameBuffer, bufferLen);
        }

        public override void GetTypenameW(global::UABESharp.AssetsFile pAssetsFile, int classID, char* nameBuffer, uint bufferLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___GetTypenameWDelegate = (global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_charPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_IntPtr_int_charPtr_uint));
            var __arg0 = ReferenceEquals(pAssetsFile, null) ? global::System.IntPtr.Zero : pAssetsFile.__Instance;
            ___GetTypenameWDelegate((__Instance + __PointerAdjustment), __arg0, classID, nameBuffer, bufferLen);
        }

        public override void FreeCOMFilePathBuf(char** filePathBuf)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___FreeCOMFilePathBufDelegate = (global::UABESharp.Delegates.Action_IntPtr_charPtrPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_charPtrPtr));
            ___FreeCOMFilePathBufDelegate((__Instance + __PointerAdjustment), filePathBuf);
        }

        public override void FreeUTF8DialogBuf(sbyte** filePathBuf)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___FreeUTF8DialogBufDelegate = (global::UABESharp.Delegates.Action_IntPtr_sbytePtrPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_sbytePtrPtr));
            ___FreeUTF8DialogBufDelegate((__Instance + __PointerAdjustment), filePathBuf);
        }

        public override sbyte* MakeExportFileName(sbyte* outFolder, string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, string extension)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___MakeExportFileNameDelegate = (global::UABESharp.Delegates.Func_sbytePtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_sbytePtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string));
            var __ret = ___MakeExportFileNameDelegate((__Instance + __PointerAdjustment), outFolder, assetName, fileId, pathId, previousFileNames, index, count, extension);
            return __ret;
        }

        public override char* MakeExportFileNameW(sbyte* outFolder, string assetName, int fileId, long pathId, sbyte** previousFileNames, uint index, uint count, string extension)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___MakeExportFileNameWDelegate = (global::UABESharp.Delegates.Func_charPtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_charPtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string));
            var __ret = ___MakeExportFileNameWDelegate((__Instance + __PointerAdjustment), outFolder, assetName, fileId, pathId, previousFileNames, index, count, extension);
            return __ret;
        }

        public override void MemFree(global::System.IntPtr buf)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___MemFreeDelegate = (global::UABESharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr_IntPtr));
            ___MemFreeDelegate((__Instance + __PointerAdjustment), buf);
        }

        public override global::System.IntPtr FopenUTF8(string fileName, string mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___FopenUTF8Delegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr_string_string));
            var __ret = ___FopenUTF8Delegate((__Instance + __PointerAdjustment), fileName, mode);
            return __ret;
        }

        public override int FopenUTF8S(global::System.IntPtr ppFile, string fileName, string mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___FopenUTF8SDelegate = (global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr_IntPtr_string_string));
            var __ret = ___FopenUTF8SDelegate((__Instance + __PointerAdjustment), ppFile, fileName, mode);
            return __ret;
        }

        public override global::UABESharp.AssetsBundleFile BundleFile
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
                var ___GetBundleFileDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetBundleFileDelegate((__Instance + __PointerAdjustment));
                global::UABESharp.AssetsBundleFile __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleFile.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetsBundleFile) global::UABESharp.AssetsBundleFile.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetsBundleFile.__CreateInstance(__ret);
                return __result0;
            }
        }

        public override global::System.IntPtr BundleFileFile
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetBundleFileFileDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetBundleFileFileDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate ulong AssetsFileReaderDelegate(ulong pos, ulong count, byte[] pBuf, int par);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void AssetsFileVerifyLoggerDelegate(sbyte* message);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate ulong AssetsFileWriterDelegate(ulong pos, ulong count, byte[] pBuf, int par);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CbFreeMemoryResourceDelegate(global::System.IntPtr pResource);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CbFreeReaderResourceDelegate(global::System.IntPtr reader, int readerPar);

    public unsafe partial struct Hash128
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte bValue[16];

            [FieldOffset(0)]
            internal fixed ushort wValue[8];

            [FieldOffset(0)]
            internal fixed uint dValue[4];

            [FieldOffset(0)]
            internal fixed ulong qValue[2];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Hash128@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private Hash128.__Internal __instance;
        internal Hash128.__Internal __Instance { get { return __instance; } }

        internal static global::UABESharp.Hash128 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.Hash128(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.Hash128 __CreateInstance(global::UABESharp.Hash128.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.Hash128(native, skipVTables);
        }

        private Hash128(global::UABESharp.Hash128.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private Hash128(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::UABESharp.Hash128.__Internal*) native;
        }

        public Hash128(global::UABESharp.Hash128 _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public byte[] BValue
        {
            get
            {
                fixed (byte* __arrPtr = __instance.bValue)
                {
                    byte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new byte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (byte* __arrPtr = __instance.bValue)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public ushort[] WValue
        {
            get
            {
                fixed (ushort* __arrPtr = __instance.wValue)
                {
                    ushort[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new ushort[8];
                        for (int i = 0; i < 8; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (ushort* __arrPtr = __instance.wValue)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 8; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public uint[] DValue
        {
            get
            {
                fixed (uint* __arrPtr = __instance.dValue)
                {
                    uint[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new uint[4];
                        for (int i = 0; i < 4; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (uint* __arrPtr = __instance.dValue)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 4; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public ulong[] QValue
        {
            get
            {
                fixed (ulong* __arrPtr = __instance.qValue)
                {
                    ulong[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new ulong[2];
                        for (int i = 0; i < 2; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (ulong* __arrPtr = __instance.qValue)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 2; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public enum AssetsReplacementType
    {
        AssetsReplacementAddOrModify = 0,
        AssetsReplacementRemove = 1
    }

    public unsafe abstract partial class AssetsReplacer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_AssetsReplacer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsReplacer@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsReplacer@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ReadAssetsReplacer@@YAPAVAssetsReplacer@@AA_KP6A_K_K1PAXJ@ZJ_N@Z")]
            internal static extern global::System.IntPtr ReadAssetsReplacer(ulong* pos, global::System.IntPtr reader, int readerPar, bool prefReplacerInMemory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeAssetRemover@@YAPAVAssetsReplacer@@K_KHG@Z")]
            internal static extern global::System.IntPtr MakeAssetRemover(uint fileID, ulong pathID, int classID, ushort monoScriptIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeAssetModifierFromReader@@YAPAVAssetsReplacer@@K_KHGP6A_K00PAXJ@ZJ00I@Z")]
            internal static extern global::System.IntPtr MakeAssetModifierFromReader(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, global::System.IntPtr reader, int readerPar, ulong size, ulong readerPos, uint copyBufferLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeAssetModifierFromMemory@@YAPAVAssetsReplacer@@K_KHGPAXIP6AX1@Z@Z")]
            internal static extern global::System.IntPtr MakeAssetModifierFromMemory(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, byte[] buffer, uint size, global::System.IntPtr freeResourceCallback);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeAssetModifierFromFile@@YAPAVAssetsReplacer@@K_KHGPAU_iobuf@@00I_N@Z")]
            internal static extern global::System.IntPtr MakeAssetModifierFromFile(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, global::System.IntPtr pFile, ulong offs, ulong size, uint copyBufferLen, bool freeFile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FreeAssetsReplacer@@YAXPAVAssetsReplacer@@@Z")]
            internal static extern void FreeAssetsReplacer(global::System.IntPtr pReplacer);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsReplacer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsReplacer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsReplacer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsReplacerInternal(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsReplacer __CreateInstance(global::UABESharp.AssetsReplacer.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsReplacerInternal(native, skipVTables);
        }

        protected AssetsReplacer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected AssetsReplacer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsReplacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.AssetsReplacer");
        }

        protected AssetsReplacer(global::UABESharp.AssetsReplacer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsReplacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.AssetsReplacer");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsReplacer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::UABESharp.AssetsReplacer.__Internal*) __Instance)->vfptr_AssetsReplacer = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract ulong Write(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar);

        public abstract ulong WriteReplacer(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar);

        public static global::UABESharp.AssetsReplacer ReadAssetsReplacer(ref ulong pos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool prefReplacerInMemory)
        {
            fixed (ulong* __refParamPtr0 = &pos)
            {
                var __arg0 = __refParamPtr0;
                var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
                var __ret = __Internal.ReadAssetsReplacer(__arg0, __arg1, readerPar, prefReplacerInMemory);
                global::UABESharp.AssetsReplacer __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret];
                else global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::UABESharp.AssetsReplacer MakeAssetRemover(uint fileID, ulong pathID, int classID, ushort monoScriptIndex)
        {
            var __ret = __Internal.MakeAssetRemover(fileID, pathID, classID, monoScriptIndex);
            global::UABESharp.AssetsReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.AssetsReplacer MakeAssetModifierFromReader(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong size, ulong readerPos, uint copyBufferLen)
        {
            var __arg4 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.MakeAssetModifierFromReader(fileID, pathID, classID, monoScriptIndex, __arg4, readerPar, size, readerPos, copyBufferLen);
            global::UABESharp.AssetsReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.AssetsReplacer MakeAssetModifierFromMemory(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, byte[] buffer, uint size, global::UABESharp.CbFreeMemoryResourceDelegate freeResourceCallback)
        {
            var __arg6 = freeResourceCallback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(freeResourceCallback);
            var __ret = __Internal.MakeAssetModifierFromMemory(fileID, pathID, classID, monoScriptIndex, buffer, size, __arg6);
            global::UABESharp.AssetsReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.AssetsReplacer MakeAssetModifierFromFile(uint fileID, ulong pathID, int classID, ushort monoScriptIndex, global::System.IntPtr pFile, ulong offs, ulong size, uint copyBufferLen, bool freeFile)
        {
            var __ret = __Internal.MakeAssetModifierFromFile(fileID, pathID, classID, monoScriptIndex, pFile, offs, size, copyBufferLen, freeFile);
            global::UABESharp.AssetsReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.AssetsReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.AssetsReplacer) global::UABESharp.AssetsReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static void FreeAssetsReplacer(global::UABESharp.AssetsReplacer pReplacer)
        {
            var __arg0 = ReferenceEquals(pReplacer, null) ? global::System.IntPtr.Zero : pReplacer.__Instance;
            __Internal.FreeAssetsReplacer(__arg0);
        }

        public abstract global::UABESharp.AssetsReplacementType Type
        {
            get;
        }

        public abstract uint FileID
        {
            get;
        }

        public abstract ulong PathID
        {
            get;
        }

        public abstract int ClassID
        {
            get;
        }

        public abstract ushort MonoScriptID
        {
            get;
        }

        public abstract ulong Size
        {
            get;
        }

        #region Virtual table interop

        // AssetsReplacementType GetType() = 0
        private static global::UABESharp.Delegates.Func_UABE_2_1d_x86_AssetsReplacementType_IntPtr _GetTypeDelegateInstance;

        private static global::UABESharp.AssetsReplacementType _GetTypeDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Type;
            return __ret;
        }

        // virtual ~AssetsReplacer() #ifndef ASSETSTOOLS_EXPORTS = 0
        private static global::UABESharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // DWORD GetFileID() = 0
        private static global::UABESharp.Delegates.Func_uint_IntPtr _GetFileIDDelegateInstance;

        private static uint _GetFileIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FileID;
            return __ret;
        }

        // QWORD GetPathID() = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr _GetPathIDDelegateInstance;

        private static ulong _GetPathIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.PathID;
            return __ret;
        }

        // int GetClassID() = 0
        private static global::UABESharp.Delegates.Func_int_IntPtr _GetClassIDDelegateInstance;

        private static int _GetClassIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ClassID;
            return __ret;
        }

        // WORD GetMonoScriptID() = 0
        private static global::UABESharp.Delegates.Func_ushort_IntPtr _GetMonoScriptIDDelegateInstance;

        private static ushort _GetMonoScriptIDDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MonoScriptID;
            return __ret;
        }

        // QWORD GetSize() = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr _GetSizeDelegateInstance;

        private static ulong _GetSizeDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Size;
            return __ret;
        }

        // QWORD Write(QWORD pos, AssetsFileWriter writer, LPARAM writerPar) = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int _WriteDelegateInstance;

        private static ulong _WriteDelegateHook(global::System.IntPtr instance, ulong pos, global::System.IntPtr writer, int writerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr1 = writer;
            var __ret = __target.Write(pos, __ptr1 == IntPtr.Zero? null : (global::UABESharp.AssetsFileWriterDelegate) Marshal.GetDelegateForFunctionPointer(__ptr1, typeof(global::UABESharp.AssetsFileWriterDelegate)), writerPar);
            return __ret;
        }

        // QWORD WriteReplacer(QWORD pos, AssetsFileWriter writer, LPARAM writerPar) = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int _WriteReplacerDelegateInstance;

        private static ulong _WriteReplacerDelegateHook(global::System.IntPtr instance, ulong pos, global::System.IntPtr writer, int writerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.AssetsReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr1 = writer;
            var __ret = __target.WriteReplacer(pos, __ptr1 == IntPtr.Zero? null : (global::UABESharp.AssetsFileWriterDelegate) Marshal.GetDelegateForFunctionPointer(__ptr1, typeof(global::UABESharp.AssetsFileWriterDelegate)), writerPar);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[9];
                _GetTypeDelegateInstance += _GetTypeDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetTypeDelegateInstance).ToPointer();
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetFileIDDelegateInstance += _GetFileIDDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetFileIDDelegateInstance).ToPointer();
                _GetPathIDDelegateInstance += _GetPathIDDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetPathIDDelegateInstance).ToPointer();
                _GetClassIDDelegateInstance += _GetClassIDDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetClassIDDelegateInstance).ToPointer();
                _GetMonoScriptIDDelegateInstance += _GetMonoScriptIDDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetMonoScriptIDDelegateInstance).ToPointer();
                _GetSizeDelegateInstance += _GetSizeDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetSizeDelegateInstance).ToPointer();
                _WriteDelegateInstance += _WriteDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_WriteDelegateInstance).ToPointer();
                _WriteReplacerDelegateInstance += _WriteReplacerDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_WriteReplacerDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(9 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[1];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(9 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = _Thunks[0];
                    *(void**) (vfptr0 + 4) = _Thunks[1];
                    *(void**) (vfptr0 + 8) = _Thunks[2];
                    *(void**) (vfptr0 + 12) = _Thunks[3];
                    *(void**) (vfptr0 + 16) = _Thunks[4];
                    *(void**) (vfptr0 + 20) = _Thunks[5];
                    *(void**) (vfptr0 + 24) = _Thunks[6];
                    *(void**) (vfptr0 + 28) = _Thunks[7];
                    *(void**) (vfptr0 + 32) = _Thunks[8];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class AssetsReplacerInternal : global::UABESharp.AssetsReplacer, IDisposable
    {
        private static void* __CopyValue(global::UABESharp.AssetsReplacer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsReplacer.__Internal));
            *(global::UABESharp.AssetsReplacer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal AssetsReplacerInternal(global::UABESharp.AssetsReplacer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal AssetsReplacerInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override ulong Write(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___WriteDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int));
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = ___WriteDelegate((__Instance + __PointerAdjustment), pos, __arg1, writerPar);
            return __ret;
        }

        public override ulong WriteReplacer(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___WriteReplacerDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int));
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = ___WriteReplacerDelegate((__Instance + __PointerAdjustment), pos, __arg1, writerPar);
            return __ret;
        }

        public override global::UABESharp.AssetsReplacementType Type
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___GetTypeDelegate = (global::UABESharp.Delegates.Func_UABE_2_1d_x86_AssetsReplacementType_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_UABE_2_1d_x86_AssetsReplacementType_IntPtr));
                var __ret = ___GetTypeDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override uint FileID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
                var ___GetFileIDDelegate = (global::UABESharp.Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_uint_IntPtr));
                var __ret = ___GetFileIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override ulong PathID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetPathIDDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr));
                var __ret = ___GetPathIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override int ClassID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
                var ___GetClassIDDelegate = (global::UABESharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_int_IntPtr));
                var __ret = ___GetClassIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override ushort MonoScriptID
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
                var ___GetMonoScriptIDDelegate = (global::UABESharp.Delegates.Func_ushort_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ushort_IntPtr));
                var __ret = ___GetMonoScriptIDDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override ulong Size
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
                var ___GetSizeDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr));
                var __ret = ___GetSizeDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class ClassDatabaseFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte valid;

            [FieldOffset(1)]
            internal byte dontFreeStringTable;

            [FieldOffset(4)]
            internal global::UABESharp.ClassDatabaseFileHeader.__Internal header;

            [FieldOffset(36)]
            internal global::StdDelegate.Vector.__Internalc__N_std_S_vector____S_ClassDatabaseType___N_std_S_allocator__S0_ classes;

            [FieldOffset(48)]
            internal global::System.IntPtr stringTable;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseFile@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseFile@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1ClassDatabaseFile@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseFile@@QAE_KP6A_K_K0PAXJ@ZJ0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseFile@@QAE_NP6A_K_K0PAXJ@ZJ@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ClassDatabaseFile@@QAE_KP6A_K_K0PBXJ@ZJ0HK_N@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos, int optimizeStringTable, uint compress, bool writeStringTable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?InsertFrom@ClassDatabaseFile@@QAE_NPAV1@PAVClassDatabaseType@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InsertFrom(global::System.IntPtr instance, global::System.IntPtr pOther, global::System.IntPtr pType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@ClassDatabaseFile@@QAEXXZ")]
            internal static extern void Clear(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@ClassDatabaseFile@@QAE_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsValid(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassDatabaseFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassDatabaseFile __CreateInstance(global::UABESharp.ClassDatabaseFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassDatabaseFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFile.__Internal));
            global::UABESharp.ClassDatabaseFile.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ClassDatabaseFile(global::UABESharp.ClassDatabaseFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassDatabaseFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassDatabaseFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public ClassDatabaseFile(global::UABESharp.ClassDatabaseFile other)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassDatabaseFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, filePos);
            return __ret;
        }

        public bool Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar);
            return __ret;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos, int optimizeStringTable, uint compress, bool writeStringTable)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos, optimizeStringTable, compress, writeStringTable);
            return __ret;
        }

        public bool InsertFrom(global::UABESharp.ClassDatabaseFile pOther, global::UABESharp.ClassDatabaseType pType)
        {
            var __arg0 = ReferenceEquals(pOther, null) ? global::System.IntPtr.Zero : pOther.__Instance;
            var __arg1 = ReferenceEquals(pType, null) ? global::System.IntPtr.Zero : pType.__Instance;
            var __ret = __Internal.InsertFrom((__Instance + __PointerAdjustment), __arg0, __arg1);
            return __ret;
        }

        public void Clear()
        {
            __Internal.Clear((__Instance + __PointerAdjustment));
        }

        public bool DontFreeStringTable
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFile.__Internal*) __Instance)->dontFreeStringTable != 0;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFile.__Internal*)__Instance)->dontFreeStringTable = (byte) (value ? 1 : 0);
            }
        }

        public global::UABESharp.ClassDatabaseFileHeader Header
        {
            get
            {
                return global::UABESharp.ClassDatabaseFileHeader.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ClassDatabaseFile.__Internal*) __Instance)->header));
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFile.__Internal*)__Instance)->header = ReferenceEquals(value, null) ? new global::UABESharp.ClassDatabaseFileHeader.__Internal() : *(global::UABESharp.ClassDatabaseFileHeader.__Internal*) value.__Instance;
            }
        }

        public sbyte* StringTable
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ClassDatabaseFile.__Internal*) __Instance)->stringTable;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFile.__Internal*)__Instance)->stringTable = (global::System.IntPtr) value;
            }
        }

        public bool IsValid
        {
            get
            {
                var __ret = __Internal.IsValid((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class ClassDatabaseFileHeader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte header[4];

            [FieldOffset(4)]
            internal byte fileVersion;

            [FieldOffset(5)]
            internal byte compressionType;

            [FieldOffset(8)]
            internal uint compressedSize;

            [FieldOffset(12)]
            internal uint uncompressedSize;

            [FieldOffset(16)]
            internal byte unityVersionCount;

            [FieldOffset(20)]
            internal global::System.IntPtr pUnityVersions;

            [FieldOffset(24)]
            internal uint stringTableLen;

            [FieldOffset(28)]
            internal uint stringTablePos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseFileHeader@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseFileHeader@@QAE_KP6A_K_K0PAXJ@ZJ0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ClassDatabaseFileHeader@@QAE_KP6A_K_K0PBXJ@ZJ0@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFileHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFileHeader>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassDatabaseFileHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFileHeader(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassDatabaseFileHeader __CreateInstance(global::UABESharp.ClassDatabaseFileHeader.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFileHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassDatabaseFileHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileHeader.__Internal));
            *(global::UABESharp.ClassDatabaseFileHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClassDatabaseFileHeader(global::UABESharp.ClassDatabaseFileHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassDatabaseFileHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassDatabaseFileHeader()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ClassDatabaseFileHeader(global::UABESharp.ClassDatabaseFileHeader _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance) = *((global::UABESharp.ClassDatabaseFileHeader.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassDatabaseFileHeader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, filePos);
            return __ret;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos);
            return __ret;
        }

        public sbyte[] Header
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->header != null)
                {
                    __value = new sbyte[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->header[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->header[i] = value[i];
                }
            }
        }

        public byte FileVersion
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->fileVersion;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->fileVersion = value;
            }
        }

        public byte CompressionType
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->compressionType;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->compressionType = value;
            }
        }

        public uint CompressedSize
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->compressedSize;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->compressedSize = value;
            }
        }

        public uint UncompressedSize
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->uncompressedSize;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->uncompressedSize = value;
            }
        }

        public byte UnityVersionCount
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->unityVersionCount;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->unityVersionCount = value;
            }
        }

        public sbyte** PUnityVersions
        {
            get
            {
                return (sbyte**) ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->pUnityVersions;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->pUnityVersions = (global::System.IntPtr) value;
            }
        }

        public uint StringTableLen
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->stringTableLen;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->stringTableLen = value;
            }
        }

        public uint StringTablePos
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileHeader.__Internal*) __Instance)->stringTablePos;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileHeader.__Internal*)__Instance)->stringTablePos = value;
            }
        }
    }

    public unsafe partial class ClassDatabaseType : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int classId;

            [FieldOffset(4)]
            internal int baseClass;

            [FieldOffset(8)]
            internal global::UABESharp.ClassDatabaseFileString.__Internal name;

            [FieldOffset(16)]
            internal global::StdDelegate.Vector.__Internalc__N_std_S_vector____S_ClassDatabaseTypeField___N_std_S_allocator__S0_ fields;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseType@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseType@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1ClassDatabaseType@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseType@@QAE_KP6A_K_K0PAXJ@ZJ0H@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos, int version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ClassDatabaseType@@QAE_KP6A_K_K0PBXJ@ZJ0H@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos, int version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MakeTypeHash@ClassDatabaseType@@QAE?ATHash128@@PAVClassDatabaseFile@@@Z")]
            internal static extern void MakeTypeHash(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr pDatabaseFile);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseType>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassDatabaseType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseType(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassDatabaseType __CreateInstance(global::UABESharp.ClassDatabaseType.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseType(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassDatabaseType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseType.__Internal));
            global::UABESharp.ClassDatabaseType.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ClassDatabaseType(global::UABESharp.ClassDatabaseType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassDatabaseType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassDatabaseType()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public ClassDatabaseType(global::UABESharp.ClassDatabaseType other)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassDatabaseType __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos, int version)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, filePos, version);
            return __ret;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos, int version)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos, version);
            return __ret;
        }

        public global::UABESharp.Hash128 MakeTypeHash(global::UABESharp.ClassDatabaseFile pDatabaseFile)
        {
            var __arg0 = ReferenceEquals(pDatabaseFile, null) ? global::System.IntPtr.Zero : pDatabaseFile.__Instance;
            var __ret = new global::UABESharp.Hash128.__Internal();
            __Internal.MakeTypeHash((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::UABESharp.Hash128.__CreateInstance(__ret);
        }

        public int ClassId
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseType.__Internal*) __Instance)->classId;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseType.__Internal*)__Instance)->classId = value;
            }
        }

        public int BaseClass
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseType.__Internal*) __Instance)->baseClass;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseType.__Internal*)__Instance)->baseClass = value;
            }
        }

        public global::UABESharp.ClassDatabaseFileString Name
        {
            get
            {
                return global::UABESharp.ClassDatabaseFileString.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ClassDatabaseType.__Internal*) __Instance)->name));
            }

            set
            {
                ((global::UABESharp.ClassDatabaseType.__Internal*)__Instance)->name = ReferenceEquals(value, null) ? new global::UABESharp.ClassDatabaseFileString.__Internal() : *(global::UABESharp.ClassDatabaseFileString.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ClassDatabaseFileString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.ClassDatabaseFileString._.__Internal str;

            [FieldOffset(4)]
            internal byte fromStringTable;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseFileString@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetString@ClassDatabaseFileString@@QAEPBDPAVClassDatabaseFile@@@Z")]
            internal static extern global::System.IntPtr GetString(global::System.IntPtr instance, global::System.IntPtr pFile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseFileString@@QAE_KP6A_K_K0PAXJ@ZJ0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ClassDatabaseFileString@@QAE_KP6A_K_K0PBXJ@ZJ0@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint stringTableOffset;

                [FieldOffset(0)]
                internal global::System.IntPtr @string;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFileString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseFileString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassDatabaseFileString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFileString(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassDatabaseFileString __CreateInstance(global::UABESharp.ClassDatabaseFileString.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseFileString(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassDatabaseFileString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileString.__Internal));
            *(global::UABESharp.ClassDatabaseFileString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClassDatabaseFileString(global::UABESharp.ClassDatabaseFileString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassDatabaseFileString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassDatabaseFileString()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ClassDatabaseFileString(global::UABESharp.ClassDatabaseFileString _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseFileString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ClassDatabaseFileString.__Internal*) __Instance) = *((global::UABESharp.ClassDatabaseFileString.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassDatabaseFileString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string GetString(global::UABESharp.ClassDatabaseFile pFile)
        {
            var __arg0 = ReferenceEquals(pFile, null) ? global::System.IntPtr.Zero : pFile.__Instance;
            var __ret = __Internal.GetString((__Instance + __PointerAdjustment), __arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public ulong Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, filePos);
            return __ret;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos);
            return __ret;
        }

        public bool FromStringTable
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseFileString.__Internal*) __Instance)->fromStringTable != 0;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseFileString.__Internal*)__Instance)->fromStringTable = (byte) (value ? 1 : 0);
            }
        }
    }

    public unsafe partial class ClassDatabaseTypeField : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.ClassDatabaseFileString.__Internal typeName;

            [FieldOffset(8)]
            internal global::UABESharp.ClassDatabaseFileString.__Internal fieldName;

            [FieldOffset(16)]
            internal byte depth;

            [FieldOffset(17)]
            internal byte isArray;

            [FieldOffset(20)]
            internal uint size;

            [FieldOffset(24)]
            internal ushort version;

            [FieldOffset(28)]
            internal uint flags2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseTypeField@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassDatabaseTypeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ClassDatabaseTypeField@@QAE_KP6A_K_K0PAXJ@ZJ0H@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos, int version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ClassDatabaseTypeField@@QAE_KP6A_K_K0PBXJ@ZJ0H@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos, int version);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseTypeField> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassDatabaseTypeField>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassDatabaseTypeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseTypeField(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassDatabaseTypeField __CreateInstance(global::UABESharp.ClassDatabaseTypeField.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassDatabaseTypeField(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassDatabaseTypeField.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseTypeField.__Internal));
            global::UABESharp.ClassDatabaseTypeField.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ClassDatabaseTypeField(global::UABESharp.ClassDatabaseTypeField.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassDatabaseTypeField(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassDatabaseTypeField()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseTypeField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public ClassDatabaseTypeField(global::UABESharp.ClassDatabaseTypeField other)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassDatabaseTypeField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassDatabaseTypeField __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos, int version)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, filePos, version);
            return __ret;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos, int version)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos, version);
            return __ret;
        }

        public global::UABESharp.ClassDatabaseFileString TypeName
        {
            get
            {
                return global::UABESharp.ClassDatabaseFileString.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->typeName));
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->typeName = ReferenceEquals(value, null) ? new global::UABESharp.ClassDatabaseFileString.__Internal() : *(global::UABESharp.ClassDatabaseFileString.__Internal*) value.__Instance;
            }
        }

        public global::UABESharp.ClassDatabaseFileString FieldName
        {
            get
            {
                return global::UABESharp.ClassDatabaseFileString.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->fieldName));
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->fieldName = ReferenceEquals(value, null) ? new global::UABESharp.ClassDatabaseFileString.__Internal() : *(global::UABESharp.ClassDatabaseFileString.__Internal*) value.__Instance;
            }
        }

        public byte Depth
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->depth;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->depth = value;
            }
        }

        public byte IsArray
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->isArray;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->isArray = value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->size = value;
            }
        }

        public ushort Version
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->version;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->version = value;
            }
        }

        public uint Flags2
        {
            get
            {
                return ((global::UABESharp.ClassDatabaseTypeField.__Internal*) __Instance)->flags2;
            }

            set
            {
                ((global::UABESharp.ClassDatabaseTypeField.__Internal*)__Instance)->flags2 = value;
            }
        }
    }

    public unsafe partial class AssetFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint filenameSize;

            [FieldOffset(4)]
            internal fixed byte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetFile@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileName@AssetFile@@QAEPADPADIH@Z")]
            internal static extern byte[] GetFileName(global::System.IntPtr instance, byte[] outbuf, uint outbufLen, int classId);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileData@AssetFile@@QAEPAEXZ")]
            internal static extern byte[] GetFileData(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileDataIndex@AssetFile@@QAEKXZ")]
            internal static extern uint GetFileDataIndex(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetFile __CreateInstance(global::UABESharp.AssetFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFile.__Internal));
            *(global::UABESharp.AssetFile.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetFile(global::UABESharp.AssetFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetFile(global::UABESharp.AssetFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetFile.__Internal*) __Instance) = *((global::UABESharp.AssetFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] GetFileName(byte[] outbuf, uint outbufLen, int classId)
        {
            var __ret = __Internal.GetFileName((__Instance + __PointerAdjustment), outbuf, outbufLen, classId);
            return __ret;
        }

        public uint FilenameSize
        {
            get
            {
                return ((global::UABESharp.AssetFile.__Internal*) __Instance)->filenameSize;
            }

            set
            {
                ((global::UABESharp.AssetFile.__Internal*)__Instance)->filenameSize = value;
            }
        }

        public byte[] Data
        {
            get
            {
                byte[] __value = null;
                if (((global::UABESharp.AssetFile.__Internal*) __Instance)->data != null)
                {
                    __value = new byte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::UABESharp.AssetFile.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::UABESharp.AssetFile.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }

        public byte[] FileData
        {
            get
            {
                var __ret = __Internal.GetFileData((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint FileDataIndex
        {
            get
            {
                var __ret = __Internal.GetFileDataIndex((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetFileInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong index;

            [FieldOffset(8)]
            internal uint offs_curFile;

            [FieldOffset(12)]
            internal uint curFileSize;

            [FieldOffset(16)]
            internal uint curFileTypeOrIndex;

            [FieldOffset(20)]
            internal ushort inheritedUnityClass;

            [FieldOffset(22)]
            internal ushort scriptIndex;

            [FieldOffset(24)]
            internal byte unknown1;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetFileInfo@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSize@AssetFileInfo@@SAKK@Z")]
            internal static extern uint GetSize(uint version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetFileInfo@@QAE_KK_KP6A_K00PAXJ@ZJ_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, uint version, ulong pos, global::System.IntPtr reader, int readerPar, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetFileInfo@@QAE_KK_KP6A_K00PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, uint version, ulong pos, global::System.IntPtr writer, int writerPar);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFileInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFileInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetFileInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileInfo(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetFileInfo __CreateInstance(global::UABESharp.AssetFileInfo.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetFileInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfo.__Internal));
            *(global::UABESharp.AssetFileInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetFileInfo(global::UABESharp.AssetFileInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetFileInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetFileInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetFileInfo(global::UABESharp.AssetFileInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetFileInfo.__Internal*) __Instance) = *((global::UABESharp.AssetFileInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetFileInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(uint version, ulong pos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool bigEndian)
        {
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), version, pos, __arg2, readerPar, bigEndian);
            return __ret;
        }

        public ulong Write(uint version, ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), version, pos, __arg2, writerPar);
            return __ret;
        }

        public static uint GetSize(uint version)
        {
            var __ret = __Internal.GetSize(version);
            return __ret;
        }

        public ulong Index
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->index;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->index = value;
            }
        }

        public uint OffsCurFile
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->offs_curFile;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->offs_curFile = value;
            }
        }

        public uint CurFileSize
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->curFileSize;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->curFileSize = value;
            }
        }

        public uint CurFileTypeOrIndex
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->curFileTypeOrIndex;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->curFileTypeOrIndex = value;
            }
        }

        public ushort InheritedUnityClass
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->inheritedUnityClass;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->inheritedUnityClass = value;
            }
        }

        public ushort ScriptIndex
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->scriptIndex;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->scriptIndex = value;
            }
        }

        public byte Unknown1
        {
            get
            {
                return ((global::UABESharp.AssetFileInfo.__Internal*) __Instance)->unknown1;
            }

            set
            {
                ((global::UABESharp.AssetFileInfo.__Internal*)__Instance)->unknown1 = value;
            }
        }
    }

    public unsafe partial class AssetFileList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint sizeFiles;

            [FieldOffset(8)]
            internal fixed byte fileInfs[32];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetFileList@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSizeBytes@AssetFileList@@QAEIK@Z")]
            internal static extern uint GetSizeBytes(global::System.IntPtr instance, uint version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetFileList@@QAE_KK_KP6A_K00PAXJ@ZJ_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, uint version, ulong pos, global::System.IntPtr reader, int readerPar, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetFileList@@QAE_KK_KP6A_K00PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, uint version, ulong pos, global::System.IntPtr writer, int writerPar);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFileList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetFileList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetFileList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileList(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetFileList __CreateInstance(global::UABESharp.AssetFileList.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileList(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetFileList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileList.__Internal));
            *(global::UABESharp.AssetFileList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetFileList(global::UABESharp.AssetFileList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetFileList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetFileList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetFileList(global::UABESharp.AssetFileList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetFileList.__Internal*) __Instance) = *((global::UABESharp.AssetFileList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetFileList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint GetSizeBytes(uint version)
        {
            var __ret = __Internal.GetSizeBytes((__Instance + __PointerAdjustment), version);
            return __ret;
        }

        public ulong Read(uint version, ulong pos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool bigEndian)
        {
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), version, pos, __arg2, readerPar, bigEndian);
            return __ret;
        }

        public ulong Write(uint version, ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), version, pos, __arg2, writerPar);
            return __ret;
        }

        public uint SizeFiles
        {
            get
            {
                return ((global::UABESharp.AssetFileList.__Internal*) __Instance)->sizeFiles;
            }

            set
            {
                ((global::UABESharp.AssetFileList.__Internal*)__Instance)->sizeFiles = value;
            }
        }

        public global::UABESharp.AssetFileInfo[] FileInfs
        {
            get
            {
                global::UABESharp.AssetFileInfo[] __value = null;
                if (((global::UABESharp.AssetFileList.__Internal*) __Instance)->fileInfs != null)
                {
                    __value = new global::UABESharp.AssetFileInfo[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = global::UABESharp.AssetFileInfo.__CreateInstance(*((global::UABESharp.AssetFileInfo.__Internal*)&(((global::UABESharp.AssetFileList.__Internal*) __Instance)->fileInfs[i * sizeof(global::UABESharp.AssetFileInfo.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 1)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 1; i++)
                        *(global::UABESharp.AssetFileInfo.__Internal*) &((global::UABESharp.AssetFileList.__Internal*)__Instance)->fileInfs[i * sizeof(global::UABESharp.AssetFileInfo.__Internal)] = *(global::UABESharp.AssetFileInfo.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    public unsafe partial class AssetsFileHeader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint metadataSize;

            [FieldOffset(4)]
            internal uint fileSize;

            [FieldOffset(8)]
            internal uint format;

            [FieldOffset(12)]
            internal uint offs_firstFile;

            [FieldOffset(16)]
            internal byte endianness;

            [FieldOffset(17)]
            internal fixed byte unknown[3];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFileHeader@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsFileHeader@@QAE_K_KP6A_K00PAXJ@ZJ@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsFileHeader@@QAE_K_KP6A_K00PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong pos, global::System.IntPtr writer, int writerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSizeBytes@AssetsFileHeader@@QAEIXZ")]
            internal static extern uint GetSizeBytes(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileHeader>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsFileHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileHeader(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsFileHeader __CreateInstance(global::UABESharp.AssetsFileHeader.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsFileHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileHeader.__Internal));
            *(global::UABESharp.AssetsFileHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsFileHeader(global::UABESharp.AssetsFileHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsFileHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsFileHeader()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsFileHeader(global::UABESharp.AssetsFileHeader _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsFileHeader.__Internal*) __Instance) = *((global::UABESharp.AssetsFileHeader.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsFileHeader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar);
            return __ret;
        }

        public ulong Write(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), pos, __arg1, writerPar);
            return __ret;
        }

        public uint MetadataSize
        {
            get
            {
                return ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->metadataSize;
            }

            set
            {
                ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->metadataSize = value;
            }
        }

        public uint FileSize
        {
            get
            {
                return ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->fileSize;
            }

            set
            {
                ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->fileSize = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->format;
            }

            set
            {
                ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->format = value;
            }
        }

        public uint OffsFirstFile
        {
            get
            {
                return ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->offs_firstFile;
            }

            set
            {
                ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->offs_firstFile = value;
            }
        }

        public byte Endianness
        {
            get
            {
                return ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->endianness;
            }

            set
            {
                ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->endianness = value;
            }
        }

        public byte[] Unknown
        {
            get
            {
                byte[] __value = null;
                if (((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->unknown != null)
                {
                    __value = new byte[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::UABESharp.AssetsFileHeader.__Internal*) __Instance)->unknown[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::UABESharp.AssetsFileHeader.__Internal*)__Instance)->unknown[i] = value[i];
                }
            }
        }

        public uint SizeBytes
        {
            get
            {
                var __ret = __Internal.GetSizeBytes((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetsFileDependency : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 536)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte bufferedPath[256];

            [FieldOffset(256)]
            internal global::UABESharp.AssetsFileDependency.GUID128.__Internal guid;

            [FieldOffset(272)]
            internal int type;

            [FieldOffset(276)]
            internal fixed sbyte assetPath[256];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFileDependency@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsFileDependency@@QAE_K_KP6A_K00PAXJ@ZJ_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsFileDependency@@QAE_K_KP6A_K00PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr writer, int writerPar);
        }

        public unsafe partial class GUID128 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal long mostSignificant;

                [FieldOffset(8)]
                internal long leastSignificant;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0GUID128@AssetsFileDependency@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Read@GUID128@AssetsFileDependency@@QAE_K_KP6A_K00PAXJ@ZJ@Z")]
                internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Write@GUID128@AssetsFileDependency@@QAE_K_KP6A_K00PBXJ@ZJ@Z")]
                internal static extern ulong Write(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr writer, int writerPar);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependency.GUID128> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependency.GUID128>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::UABESharp.AssetsFileDependency.GUID128 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UABESharp.AssetsFileDependency.GUID128(native.ToPointer(), skipVTables);
            }

            internal static global::UABESharp.AssetsFileDependency.GUID128 __CreateInstance(global::UABESharp.AssetsFileDependency.GUID128.__Internal native, bool skipVTables = false)
            {
                return new global::UABESharp.AssetsFileDependency.GUID128(native, skipVTables);
            }

            private static void* __CopyValue(global::UABESharp.AssetsFileDependency.GUID128.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.GUID128.__Internal));
                *(global::UABESharp.AssetsFileDependency.GUID128.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private GUID128(global::UABESharp.AssetsFileDependency.GUID128.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected GUID128(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public GUID128()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.GUID128.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public GUID128(global::UABESharp.AssetsFileDependency.GUID128 _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.GUID128.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UABESharp.AssetsFileDependency.GUID128.__Internal*) __Instance) = *((global::UABESharp.AssetsFileDependency.GUID128.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UABESharp.AssetsFileDependency.GUID128 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
            {
                var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
                var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar);
                return __ret;
            }

            public ulong Write(ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
            {
                var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), absFilePos, __arg1, writerPar);
                return __ret;
            }

            public long MostSignificant
            {
                get
                {
                    return ((global::UABESharp.AssetsFileDependency.GUID128.__Internal*) __Instance)->mostSignificant;
                }

                set
                {
                    ((global::UABESharp.AssetsFileDependency.GUID128.__Internal*)__Instance)->mostSignificant = value;
                }
            }

            public long LeastSignificant
            {
                get
                {
                    return ((global::UABESharp.AssetsFileDependency.GUID128.__Internal*) __Instance)->leastSignificant;
                }

                set
                {
                    ((global::UABESharp.AssetsFileDependency.GUID128.__Internal*)__Instance)->leastSignificant = value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependency> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependency>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsFileDependency __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileDependency(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsFileDependency __CreateInstance(global::UABESharp.AssetsFileDependency.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileDependency(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsFileDependency.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.__Internal));
            *(global::UABESharp.AssetsFileDependency.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsFileDependency(global::UABESharp.AssetsFileDependency.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsFileDependency(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsFileDependency()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsFileDependency(global::UABESharp.AssetsFileDependency _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependency.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsFileDependency.__Internal*) __Instance) = *((global::UABESharp.AssetsFileDependency.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsFileDependency __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool bigEndian)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar, bigEndian);
            return __ret;
        }

        public ulong Write(ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), absFilePos, __arg1, writerPar);
            return __ret;
        }

        public sbyte[] BufferedPath
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->bufferedPath != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->bufferedPath[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::UABESharp.AssetsFileDependency.__Internal*)__Instance)->bufferedPath[i] = value[i];
                }
            }
        }

        public global::UABESharp.AssetsFileDependency.GUID128 Guid
        {
            get
            {
                return global::UABESharp.AssetsFileDependency.GUID128.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->guid));
            }

            set
            {
                ((global::UABESharp.AssetsFileDependency.__Internal*)__Instance)->guid = ReferenceEquals(value, null) ? new global::UABESharp.AssetsFileDependency.GUID128.__Internal() : *(global::UABESharp.AssetsFileDependency.GUID128.__Internal*) value.__Instance;
            }
        }

        public int Type
        {
            get
            {
                return ((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::UABESharp.AssetsFileDependency.__Internal*)__Instance)->type = value;
            }
        }

        public sbyte[] AssetPath
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->assetPath != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::UABESharp.AssetsFileDependency.__Internal*) __Instance)->assetPath[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::UABESharp.AssetsFileDependency.__Internal*)__Instance)->assetPath[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class AssetsFileDependencyList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dependencyCount;

            [FieldOffset(4)]
            internal global::System.IntPtr pDependencies;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFileDependencyList@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsFileDependencyList@@QAE_K_KP6A_K00PAXJ@ZJK_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint format, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsFileDependencyList@@QAE_K_KP6A_K00PBXJ@ZJK@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr writer, int writerPar, uint format);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependencyList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileDependencyList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsFileDependencyList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileDependencyList(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsFileDependencyList __CreateInstance(global::UABESharp.AssetsFileDependencyList.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileDependencyList(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsFileDependencyList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependencyList.__Internal));
            *(global::UABESharp.AssetsFileDependencyList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsFileDependencyList(global::UABESharp.AssetsFileDependencyList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsFileDependencyList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsFileDependencyList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependencyList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsFileDependencyList(global::UABESharp.AssetsFileDependencyList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileDependencyList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance) = *((global::UABESharp.AssetsFileDependencyList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsFileDependencyList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint format, bool bigEndian)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar, format, bigEndian);
            return __ret;
        }

        public ulong Write(ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, uint format)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), absFilePos, __arg1, writerPar, format);
            return __ret;
        }

        public uint DependencyCount
        {
            get
            {
                return ((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance)->dependencyCount;
            }

            set
            {
                ((global::UABESharp.AssetsFileDependencyList.__Internal*)__Instance)->dependencyCount = value;
            }
        }

        public global::UABESharp.AssetsFileDependency PDependencies
        {
            get
            {
                global::UABESharp.AssetsFileDependency __result0;
                if (((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance)->pDependencies == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsFileDependency.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance)->pDependencies))
                    __result0 = (global::UABESharp.AssetsFileDependency) global::UABESharp.AssetsFileDependency.NativeToManagedMap[((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance)->pDependencies];
                else __result0 = global::UABESharp.AssetsFileDependency.__CreateInstance(((global::UABESharp.AssetsFileDependencyList.__Internal*) __Instance)->pDependencies);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsFileDependencyList.__Internal*)__Instance)->pDependencies = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class TypeField0D : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort version;

            [FieldOffset(2)]
            internal byte depth;

            [FieldOffset(3)]
            internal byte isArray;

            [FieldOffset(4)]
            internal uint typeStringOffset;

            [FieldOffset(8)]
            internal uint nameStringOffset;

            [FieldOffset(12)]
            internal uint size;

            [FieldOffset(16)]
            internal uint index;

            [FieldOffset(20)]
            internal uint flags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TypeField_0D@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@TypeField_0D@@QAE_K_KP6A_K00PAXJ@ZJ_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@TypeField_0D@@QAE_K_KP6A_K00PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong curFilePos, global::System.IntPtr reader, int writerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypeString@TypeField_0D@@QAEPBDPBDI@Z")]
            internal static extern global::System.IntPtr GetTypeString(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string stringTable, uint stringTableLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNameString@TypeField_0D@@QAEPBDPBDI@Z")]
            internal static extern global::System.IntPtr GetNameString(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string stringTable, uint stringTableLen);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeField0D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeField0D>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.TypeField0D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeField0D(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.TypeField0D __CreateInstance(global::UABESharp.TypeField0D.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeField0D(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.TypeField0D.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField0D.__Internal));
            *(global::UABESharp.TypeField0D.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TypeField0D(global::UABESharp.TypeField0D.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeField0D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeField0D()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField0D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TypeField0D(global::UABESharp.TypeField0D _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField0D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.TypeField0D.__Internal*) __Instance) = *((global::UABESharp.TypeField0D.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.TypeField0D __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool bigEndian)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar, bigEndian);
            return __ret;
        }

        public ulong Write(ulong curFilePos, global::UABESharp.AssetsFileWriterDelegate reader, int writerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), curFilePos, __arg1, writerPar);
            return __ret;
        }

        public string GetTypeString(string stringTable, uint stringTableLen)
        {
            var __ret = __Internal.GetTypeString((__Instance + __PointerAdjustment), stringTable, stringTableLen);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string GetNameString(string stringTable, uint stringTableLen)
        {
            var __ret = __Internal.GetNameString((__Instance + __PointerAdjustment), stringTable, stringTableLen);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public ushort Version
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->version;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->version = value;
            }
        }

        public byte Depth
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->depth;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->depth = value;
            }
        }

        public bool IsArray
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->isArray != 0;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->isArray = (byte) (value ? 1 : 0);
            }
        }

        public uint TypeStringOffset
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->typeStringOffset;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->typeStringOffset = value;
            }
        }

        public uint NameStringOffset
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->nameStringOffset;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->nameStringOffset = value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->size = value;
            }
        }

        public uint Index
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->index;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->index = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::UABESharp.TypeField0D.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::UABESharp.TypeField0D.__Internal*)__Instance)->flags = value;
            }
        }
    }

    public unsafe partial class Type0D : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int classId;

            [FieldOffset(4)]
            internal byte unknown16_1;

            [FieldOffset(6)]
            internal ushort scriptIndex;

            [FieldOffset(8)]
            internal uint unknown1;

            [FieldOffset(12)]
            internal uint unknown2;

            [FieldOffset(16)]
            internal uint unknown3;

            [FieldOffset(20)]
            internal uint unknown4;

            [FieldOffset(24)]
            internal uint unknown5;

            [FieldOffset(28)]
            internal uint unknown6;

            [FieldOffset(32)]
            internal uint unknown7;

            [FieldOffset(36)]
            internal uint unknown8;

            [FieldOffset(40)]
            internal uint typeFieldsExCount;

            [FieldOffset(44)]
            internal global::System.IntPtr pTypeFieldsEx;

            [FieldOffset(48)]
            internal uint stringTableLen;

            [FieldOffset(52)]
            internal global::System.IntPtr pStringTable;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Type_0D@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@Type_0D@@QAE_K_N_KP6A_K11PAXJ@ZJKK0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint version, uint typeVersion, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@Type_0D@@QAE_K_N_KP6A_K11PBXJ@ZJK@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr writer, int writerPar, uint version);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.Type0D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.Type0D>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.Type0D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.Type0D(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.Type0D __CreateInstance(global::UABESharp.Type0D.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.Type0D(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.Type0D.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type0D.__Internal));
            *(global::UABESharp.Type0D.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Type0D(global::UABESharp.Type0D.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Type0D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Type0D()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type0D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Type0D(global::UABESharp.Type0D _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type0D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.Type0D.__Internal*) __Instance) = *((global::UABESharp.Type0D.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.Type0D __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint version, uint typeVersion, bool bigEndian)
        {
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, readerPar, version, typeVersion, bigEndian);
            return __ret;
        }

        public ulong Write(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, uint version)
        {
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, writerPar, version);
            return __ret;
        }

        public int ClassId
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->classId;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->classId = value;
            }
        }

        public byte Unknown16_1
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown16_1;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown16_1 = value;
            }
        }

        public ushort ScriptIndex
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->scriptIndex;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->scriptIndex = value;
            }
        }

        public uint Unknown1
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown1;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown1 = value;
            }
        }

        public uint Unknown2
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown2;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown2 = value;
            }
        }

        public uint Unknown3
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown3;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown3 = value;
            }
        }

        public uint Unknown4
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown4;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown4 = value;
            }
        }

        public uint Unknown5
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown5;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown5 = value;
            }
        }

        public uint Unknown6
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown6;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown6 = value;
            }
        }

        public uint Unknown7
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown7;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown7 = value;
            }
        }

        public uint Unknown8
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->unknown8;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->unknown8 = value;
            }
        }

        public uint TypeFieldsExCount
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->typeFieldsExCount;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->typeFieldsExCount = value;
            }
        }

        public global::UABESharp.TypeField0D PTypeFieldsEx
        {
            get
            {
                global::UABESharp.TypeField0D __result0;
                if (((global::UABESharp.Type0D.__Internal*) __Instance)->pTypeFieldsEx == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.TypeField0D.NativeToManagedMap.ContainsKey(((global::UABESharp.Type0D.__Internal*) __Instance)->pTypeFieldsEx))
                    __result0 = (global::UABESharp.TypeField0D) global::UABESharp.TypeField0D.NativeToManagedMap[((global::UABESharp.Type0D.__Internal*) __Instance)->pTypeFieldsEx];
                else __result0 = global::UABESharp.TypeField0D.__CreateInstance(((global::UABESharp.Type0D.__Internal*) __Instance)->pTypeFieldsEx);
                return __result0;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->pTypeFieldsEx = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint StringTableLen
        {
            get
            {
                return ((global::UABESharp.Type0D.__Internal*) __Instance)->stringTableLen;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->stringTableLen = value;
            }
        }

        public sbyte* PStringTable
        {
            get
            {
                return (sbyte*) ((global::UABESharp.Type0D.__Internal*) __Instance)->pStringTable;
            }

            set
            {
                ((global::UABESharp.Type0D.__Internal*)__Instance)->pStringTable = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TypeField07 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 540)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte type[256];

            [FieldOffset(256)]
            internal fixed sbyte name[256];

            [FieldOffset(512)]
            internal uint size;

            [FieldOffset(516)]
            internal uint index;

            [FieldOffset(520)]
            internal uint arrayFlag;

            [FieldOffset(524)]
            internal uint flags1;

            [FieldOffset(528)]
            internal uint flags2;

            [FieldOffset(532)]
            internal uint childrenCount;

            [FieldOffset(536)]
            internal global::System.IntPtr children;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TypeField_07@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@TypeField_07@@QAE_K_N_KP6A_K11PAXJ@ZJKK0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint version, uint typeVersion, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@TypeField_07@@QAE_K_N_KP6A_K11PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr writer, int writerPar);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeField07> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeField07>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.TypeField07 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeField07(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.TypeField07 __CreateInstance(global::UABESharp.TypeField07.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeField07(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.TypeField07.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField07.__Internal));
            *(global::UABESharp.TypeField07.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TypeField07(global::UABESharp.TypeField07.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeField07(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeField07()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField07.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TypeField07(global::UABESharp.TypeField07 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeField07.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.TypeField07.__Internal*) __Instance) = *((global::UABESharp.TypeField07.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.TypeField07 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint version, uint typeVersion, bool bigEndian)
        {
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, readerPar, version, typeVersion, bigEndian);
            return __ret;
        }

        public ulong Write(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, writerPar);
            return __ret;
        }

        public sbyte[] Type
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.TypeField07.__Internal*) __Instance)->type != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::UABESharp.TypeField07.__Internal*) __Instance)->type[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::UABESharp.TypeField07.__Internal*)__Instance)->type[i] = value[i];
                }
            }
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.TypeField07.__Internal*) __Instance)->name != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::UABESharp.TypeField07.__Internal*) __Instance)->name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::UABESharp.TypeField07.__Internal*)__Instance)->name[i] = value[i];
                }
            }
        }

        public uint Size
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->size = value;
            }
        }

        public uint Index
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->index;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->index = value;
            }
        }

        public uint ArrayFlag
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->arrayFlag;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->arrayFlag = value;
            }
        }

        public uint Flags1
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->flags1;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->flags1 = value;
            }
        }

        public uint Flags2
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->flags2;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->flags2 = value;
            }
        }

        public uint ChildrenCount
        {
            get
            {
                return ((global::UABESharp.TypeField07.__Internal*) __Instance)->childrenCount;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->childrenCount = value;
            }
        }

        public global::UABESharp.TypeField07 Children
        {
            get
            {
                global::UABESharp.TypeField07 __result0;
                if (((global::UABESharp.TypeField07.__Internal*) __Instance)->children == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.TypeField07.NativeToManagedMap.ContainsKey(((global::UABESharp.TypeField07.__Internal*) __Instance)->children))
                    __result0 = (global::UABESharp.TypeField07) global::UABESharp.TypeField07.NativeToManagedMap[((global::UABESharp.TypeField07.__Internal*) __Instance)->children];
                else __result0 = global::UABESharp.TypeField07.__CreateInstance(((global::UABESharp.TypeField07.__Internal*) __Instance)->children);
                return __result0;
            }

            set
            {
                ((global::UABESharp.TypeField07.__Internal*)__Instance)->children = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class Type07 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 544)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int classId;

            [FieldOffset(4)]
            internal global::UABESharp.TypeField07.__Internal @base;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Type_07@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@Type_07@@QAE_K_N_KP6A_K11PAXJ@ZJKK0@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint version, uint typeVersion, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@Type_07@@QAE_K_N_KP6A_K11PBXJ@ZJ@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, bool hasTypeTree, ulong absFilePos, global::System.IntPtr writer, int writerPar);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.Type07> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.Type07>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.Type07 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.Type07(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.Type07 __CreateInstance(global::UABESharp.Type07.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.Type07(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.Type07.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type07.__Internal));
            *(global::UABESharp.Type07.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Type07(global::UABESharp.Type07.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Type07(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Type07()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type07.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Type07(global::UABESharp.Type07 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.Type07.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.Type07.__Internal*) __Instance) = *((global::UABESharp.Type07.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.Type07 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint version, uint typeVersion, bool bigEndian)
        {
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, readerPar, version, typeVersion, bigEndian);
            return __ret;
        }

        public ulong Write(bool hasTypeTree, ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), hasTypeTree, absFilePos, __arg2, writerPar);
            return __ret;
        }

        public int ClassId
        {
            get
            {
                return ((global::UABESharp.Type07.__Internal*) __Instance)->classId;
            }

            set
            {
                ((global::UABESharp.Type07.__Internal*)__Instance)->classId = value;
            }
        }

        public global::UABESharp.TypeField07 Base
        {
            get
            {
                return global::UABESharp.TypeField07.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.Type07.__Internal*) __Instance)->@base));
            }

            set
            {
                ((global::UABESharp.Type07.__Internal*)__Instance)->@base = ReferenceEquals(value, null) ? new global::UABESharp.TypeField07.__Internal() : *(global::UABESharp.TypeField07.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class TypeTree : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte unityVersion[25];

            [FieldOffset(28)]
            internal uint version;

            [FieldOffset(32)]
            internal byte hasTypeTree;

            [FieldOffset(36)]
            internal uint fieldCount;

            [FieldOffset(40)]
            internal global::UABESharp.TypeTree._.__Internal _;

            [FieldOffset(44)]
            internal uint dwUnknown;

            [FieldOffset(48)]
            internal uint _fmt;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TypeTree@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@TypeTree@@QAE_K_KP6A_K00PAXJ@ZJK_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint version, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@TypeTree@@QAE_K_KP6A_K00PBXJ@ZJK@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr writer, int writerPar, uint version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@TypeTree@@QAEXXZ")]
            internal static extern void Clear(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr pTypes_Unity5;

                [FieldOffset(0)]
                internal global::System.IntPtr pTypes_Unity4;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeTree> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TypeTree>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.TypeTree __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeTree(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.TypeTree __CreateInstance(global::UABESharp.TypeTree.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.TypeTree(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.TypeTree.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeTree.__Internal));
            *(global::UABESharp.TypeTree.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TypeTree(global::UABESharp.TypeTree.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeTree(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeTree()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeTree.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TypeTree(global::UABESharp.TypeTree _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TypeTree.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.TypeTree.__Internal*) __Instance) = *((global::UABESharp.TypeTree.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.TypeTree __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint version, bool bigEndian)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar, version, bigEndian);
            return __ret;
        }

        public ulong Write(ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, uint version)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), absFilePos, __arg1, writerPar, version);
            return __ret;
        }

        public void Clear()
        {
            __Internal.Clear((__Instance + __PointerAdjustment));
        }

        public sbyte[] UnityVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.TypeTree.__Internal*) __Instance)->unityVersion != null)
                {
                    __value = new sbyte[25];
                    for (int i = 0; i < 25; i++)
                        __value[i] = ((global::UABESharp.TypeTree.__Internal*) __Instance)->unityVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 25; i++)
                        ((global::UABESharp.TypeTree.__Internal*)__Instance)->unityVersion[i] = value[i];
                }
            }
        }

        public uint Version
        {
            get
            {
                return ((global::UABESharp.TypeTree.__Internal*) __Instance)->version;
            }

            set
            {
                ((global::UABESharp.TypeTree.__Internal*)__Instance)->version = value;
            }
        }

        public bool HasTypeTree
        {
            get
            {
                return ((global::UABESharp.TypeTree.__Internal*) __Instance)->hasTypeTree != 0;
            }

            set
            {
                ((global::UABESharp.TypeTree.__Internal*)__Instance)->hasTypeTree = (byte) (value ? 1 : 0);
            }
        }

        public uint FieldCount
        {
            get
            {
                return ((global::UABESharp.TypeTree.__Internal*) __Instance)->fieldCount;
            }

            set
            {
                ((global::UABESharp.TypeTree.__Internal*)__Instance)->fieldCount = value;
            }
        }

        public uint DwUnknown
        {
            get
            {
                return ((global::UABESharp.TypeTree.__Internal*) __Instance)->dwUnknown;
            }

            set
            {
                ((global::UABESharp.TypeTree.__Internal*)__Instance)->dwUnknown = value;
            }
        }

        public uint Fmt
        {
            get
            {
                return ((global::UABESharp.TypeTree.__Internal*) __Instance)->_fmt;
            }

            set
            {
                ((global::UABESharp.TypeTree.__Internal*)__Instance)->_fmt = value;
            }
        }
    }

    public unsafe partial class AssetPPtr : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint fileID;

            [FieldOffset(8)]
            internal ulong pathID;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetPPtr@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetPPtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetPPtr>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetPPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetPPtr(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetPPtr __CreateInstance(global::UABESharp.AssetPPtr.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetPPtr(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetPPtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetPPtr.__Internal));
            *(global::UABESharp.AssetPPtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetPPtr(global::UABESharp.AssetPPtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetPPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetPPtr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetPPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetPPtr(global::UABESharp.AssetPPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetPPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetPPtr.__Internal*) __Instance) = *((global::UABESharp.AssetPPtr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetPPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FileID
        {
            get
            {
                return ((global::UABESharp.AssetPPtr.__Internal*) __Instance)->fileID;
            }

            set
            {
                ((global::UABESharp.AssetPPtr.__Internal*)__Instance)->fileID = value;
            }
        }

        public ulong PathID
        {
            get
            {
                return ((global::UABESharp.AssetPPtr.__Internal*) __Instance)->pathID;
            }

            set
            {
                ((global::UABESharp.AssetPPtr.__Internal*)__Instance)->pathID = value;
            }
        }
    }

    public unsafe partial class PreloadList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint len;

            [FieldOffset(4)]
            internal global::System.IntPtr items;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0PreloadList@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@PreloadList@@QAE_K_KP6A_K00PAXJ@ZJK_N@Z")]
            internal static extern ulong Read(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr reader, int readerPar, uint format, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@PreloadList@@QAE_K_KP6A_K00PBXJ@ZJK@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, ulong absFilePos, global::System.IntPtr writer, int writerPar, uint format);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PreloadList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PreloadList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.PreloadList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.PreloadList(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.PreloadList __CreateInstance(global::UABESharp.PreloadList.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.PreloadList(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.PreloadList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadList.__Internal));
            *(global::UABESharp.PreloadList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PreloadList(global::UABESharp.PreloadList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PreloadList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PreloadList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PreloadList(global::UABESharp.PreloadList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.PreloadList.__Internal*) __Instance) = *((global::UABESharp.PreloadList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.PreloadList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Read(ulong absFilePos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, uint format, bool bigEndian)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), absFilePos, __arg1, readerPar, format, bigEndian);
            return __ret;
        }

        public ulong Write(ulong absFilePos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, uint format)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), absFilePos, __arg1, writerPar, format);
            return __ret;
        }

        public uint Len
        {
            get
            {
                return ((global::UABESharp.PreloadList.__Internal*) __Instance)->len;
            }

            set
            {
                ((global::UABESharp.PreloadList.__Internal*)__Instance)->len = value;
            }
        }

        public global::UABESharp.AssetPPtr Items
        {
            get
            {
                global::UABESharp.AssetPPtr __result0;
                if (((global::UABESharp.PreloadList.__Internal*) __Instance)->items == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetPPtr.NativeToManagedMap.ContainsKey(((global::UABESharp.PreloadList.__Internal*) __Instance)->items))
                    __result0 = (global::UABESharp.AssetPPtr) global::UABESharp.AssetPPtr.NativeToManagedMap[((global::UABESharp.PreloadList.__Internal*) __Instance)->items];
                else __result0 = global::UABESharp.AssetPPtr.__CreateInstance(((global::UABESharp.PreloadList.__Internal*) __Instance)->items);
                return __result0;
            }

            set
            {
                ((global::UABESharp.PreloadList.__Internal*)__Instance)->items = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class AssetsFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 104)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.AssetsFileHeader.__Internal header;

            [FieldOffset(20)]
            internal global::UABESharp.TypeTree.__Internal typeTree;

            [FieldOffset(72)]
            internal global::UABESharp.PreloadList.__Internal preloadTable;

            [FieldOffset(80)]
            internal global::UABESharp.AssetsFileDependencyList.__Internal dependencies;

            [FieldOffset(88)]
            internal uint AssetTablePos;

            [FieldOffset(92)]
            internal uint AssetCount;

            [FieldOffset(96)]
            internal global::System.IntPtr reader;

            [FieldOffset(100)]
            internal int readerPar;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFile@@QAE@P6A_K_K0PAXJ@ZJ@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFile@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetsFile@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsFile@@QAE_KP6A_K_K0PBXJ@ZJ0PAPAVAssetsReplacer@@IKPAVClassDatabaseFile@@@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos, global::System.IntPtr pReplacers, uint replacerCount, uint fileID, global::System.IntPtr typeMeta);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFile@AssetsFile@@QAE_N_KP6A_K00PAXJ@ZPAUAssetFile@@J@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAssetFile(global::System.IntPtr instance, ulong fileInfoOffset, global::System.IntPtr reader, global::System.IntPtr pBuf, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileOffs@AssetsFile@@QAE_K_KP6A_K00PAXJ@ZJ@Z")]
            internal static extern ulong GetAssetFileOffs(global::System.IntPtr instance, ulong fileInfoOffset, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileByIndex@AssetsFile@@QAE_N_KPAUAssetFile@@PAIP6A_K00PAXJ@ZJ@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAssetFileByIndex(global::System.IntPtr instance, ulong fileIndex, global::System.IntPtr pBuf, uint* pSize, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileOffsByIndex@AssetsFile@@QAE_K_KP6A_K00PAXJ@ZJ@Z")]
            internal static extern ulong GetAssetFileOffsByIndex(global::System.IntPtr instance, ulong fileIndex, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileByName@AssetsFile@@QAE_NPBDPAUAssetFile@@PAIP6A_K_K3PAXJ@ZJ@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAssetFileByName(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr pBuf, uint* pSize, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileOffsByName@AssetsFile@@QAE_KPBDP6A_K_K1PAXJ@ZJ@Z")]
            internal static extern ulong GetAssetFileOffsByName(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileInfoOffs@AssetsFile@@QAE_K_KP6A_K00PAXJ@ZJ@Z")]
            internal static extern ulong GetAssetFileInfoOffs(global::System.IntPtr instance, ulong fileIndex, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAssetFileInfoOffsByName@AssetsFile@@QAE_KPBDP6A_K_K1PAXJ@ZJ@Z")]
            internal static extern ulong GetAssetFileInfoOffsByName(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileList@AssetsFile@@QAE_KP6A_K_K0PAXJ@ZJ@Z")]
            internal static extern ulong GetFileList(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?VerifyAssetsFile@AssetsFile@@QAE_NP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VerifyAssetsFile(global::System.IntPtr instance, global::System.IntPtr logger);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsFile __CreateInstance(global::UABESharp.AssetsFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFile.__Internal));
            *(global::UABESharp.AssetsFile.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsFile(global::UABESharp.AssetsFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsFile(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, readerPar);
        }

        public AssetsFile(global::UABESharp.AssetsFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsFile.__Internal*) __Instance) = *((global::UABESharp.AssetsFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos, global::UABESharp.AssetsReplacer pReplacers, uint replacerCount, uint fileID, global::UABESharp.ClassDatabaseFile typeMeta)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __arg3 = ReferenceEquals(pReplacers, null) ? global::System.IntPtr.Zero : pReplacers.__Instance;
            var __arg6 = ReferenceEquals(typeMeta, null) ? global::System.IntPtr.Zero : typeMeta.__Instance;
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos, __arg3, replacerCount, fileID, __arg6);
            return __ret;
        }

        public bool GetAssetFile(ulong fileInfoOffset, global::UABESharp.AssetsFileReaderDelegate reader, global::UABESharp.AssetFile pBuf, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = ReferenceEquals(pBuf, null) ? global::System.IntPtr.Zero : pBuf.__Instance;
            var __ret = __Internal.GetAssetFile((__Instance + __PointerAdjustment), fileInfoOffset, __arg1, __arg2, readerPar);
            return __ret;
        }

        public ulong GetAssetFileOffs(ulong fileInfoOffset, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetAssetFileOffs((__Instance + __PointerAdjustment), fileInfoOffset, __arg1, readerPar);
            return __ret;
        }

        public bool GetAssetFileByIndex(ulong fileIndex, global::UABESharp.AssetFile pBuf, ref uint pSize, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = ReferenceEquals(pBuf, null) ? global::System.IntPtr.Zero : pBuf.__Instance;
            fixed (uint* __refParamPtr2 = &pSize)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
                var __ret = __Internal.GetAssetFileByIndex((__Instance + __PointerAdjustment), fileIndex, __arg1, __arg2, __arg3, readerPar);
                return __ret;
            }
        }

        public ulong GetAssetFileOffsByIndex(ulong fileIndex, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetAssetFileOffsByIndex((__Instance + __PointerAdjustment), fileIndex, __arg1, readerPar);
            return __ret;
        }

        public bool GetAssetFileByName(string name, global::UABESharp.AssetFile pBuf, ref uint pSize, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = ReferenceEquals(pBuf, null) ? global::System.IntPtr.Zero : pBuf.__Instance;
            fixed (uint* __refParamPtr2 = &pSize)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
                var __ret = __Internal.GetAssetFileByName((__Instance + __PointerAdjustment), name, __arg1, __arg2, __arg3, readerPar);
                return __ret;
            }
        }

        public ulong GetAssetFileOffsByName(string name, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetAssetFileOffsByName((__Instance + __PointerAdjustment), name, __arg1, readerPar);
            return __ret;
        }

        public ulong GetAssetFileInfoOffs(ulong fileIndex, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetAssetFileInfoOffs((__Instance + __PointerAdjustment), fileIndex, __arg1, readerPar);
            return __ret;
        }

        public ulong GetAssetFileInfoOffsByName(string name, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetAssetFileInfoOffsByName((__Instance + __PointerAdjustment), name, __arg1, readerPar);
            return __ret;
        }

        public ulong GetFileList(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __ret = __Internal.GetFileList((__Instance + __PointerAdjustment), __arg0, readerPar);
            return __ret;
        }

        public bool VerifyAssetsFile(global::UABESharp.AssetsFileVerifyLoggerDelegate logger)
        {
            var __arg0 = logger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(logger);
            var __ret = __Internal.VerifyAssetsFile((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public global::UABESharp.AssetsFileHeader Header
        {
            get
            {
                return global::UABESharp.AssetsFileHeader.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetsFile.__Internal*) __Instance)->header));
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->header = ReferenceEquals(value, null) ? new global::UABESharp.AssetsFileHeader.__Internal() : *(global::UABESharp.AssetsFileHeader.__Internal*) value.__Instance;
            }
        }

        public global::UABESharp.TypeTree TypeTree
        {
            get
            {
                return global::UABESharp.TypeTree.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetsFile.__Internal*) __Instance)->typeTree));
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->typeTree = ReferenceEquals(value, null) ? new global::UABESharp.TypeTree.__Internal() : *(global::UABESharp.TypeTree.__Internal*) value.__Instance;
            }
        }

        public global::UABESharp.PreloadList PreloadTable
        {
            get
            {
                return global::UABESharp.PreloadList.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetsFile.__Internal*) __Instance)->preloadTable));
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->preloadTable = ReferenceEquals(value, null) ? new global::UABESharp.PreloadList.__Internal() : *(global::UABESharp.PreloadList.__Internal*) value.__Instance;
            }
        }

        public global::UABESharp.AssetsFileDependencyList Dependencies
        {
            get
            {
                return global::UABESharp.AssetsFileDependencyList.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetsFile.__Internal*) __Instance)->dependencies));
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->dependencies = ReferenceEquals(value, null) ? new global::UABESharp.AssetsFileDependencyList.__Internal() : *(global::UABESharp.AssetsFileDependencyList.__Internal*) value.__Instance;
            }
        }

        public uint AssetTablePos
        {
            get
            {
                return ((global::UABESharp.AssetsFile.__Internal*) __Instance)->AssetTablePos;
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->AssetTablePos = value;
            }
        }

        public uint AssetCount
        {
            get
            {
                return ((global::UABESharp.AssetsFile.__Internal*) __Instance)->AssetCount;
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->AssetCount = value;
            }
        }

        public global::UABESharp.AssetsFileReaderDelegate Reader
        {
            get
            {
                var __ptr0 = ((global::UABESharp.AssetsFile.__Internal*) __Instance)->reader;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->reader = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public int ReaderPar
        {
            get
            {
                return ((global::UABESharp.AssetsFile.__Internal*) __Instance)->readerPar;
            }

            set
            {
                ((global::UABESharp.AssetsFile.__Internal*)__Instance)->readerPar = value;
            }
        }
    }

    public unsafe partial class AssetsFileFormat
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SwapEndians@@YAKK@Z")]
            internal static extern uint SwapEndians(uint old);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SwapEndians_@@YAXAAK@Z")]
            internal static extern void SwapEndians_1(uint* old);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StringIsValid@@YA_NPADH@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool StringIsValid(sbyte* str, int len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?HasName@@YA_NK@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasName(uint type);
        }

        public static uint SwapEndians(uint old)
        {
            var __ret = __Internal.SwapEndians(old);
            return __ret;
        }

        public static void SwapEndians(ref uint old)
        {
            fixed (uint* __refParamPtr0 = &old)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SwapEndians_1(__arg0);
            }
        }

        public static bool StringIsValid(sbyte* str, int len)
        {
            var __ret = __Internal.StringIsValid(str, len);
            return __ret;
        }

        public static bool HasName(uint type)
        {
            var __ret = __Internal.HasName(type);
            return __ret;
        }
    }

    public unsafe partial class AssetsFileReader
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsReaderFromSplitFile@@YAJPBD@Z")]
            internal static extern int CreateAssetsReaderFromSplitFile([MarshalAs(UnmanagedType.LPStr)] string baseFileName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsReaderFromSplitFileW@@YAJPB_W@Z")]
            internal static extern int CreateAssetsReaderFromSplitFileW([MarshalAs(UnmanagedType.LPStr)] string baseFileName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_AssetsReaderFromSplitFile@@YAXJ@Z")]
            internal static extern void FreeAssetsReaderFromSplitFile(int lParam);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsReaderFromSplitFile@@YA_K_K0PAXJ@Z")]
            internal static extern ulong AssetsReaderFromSplitFile(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsReaderFromFile@@YA_K_K0PAXJ@Z")]
            internal static extern ulong AssetsReaderFromFile(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsVerifyLoggerFromFile@@YAXPAD@Z")]
            internal static extern void AssetsVerifyLoggerFromFile(sbyte* message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsVerifyLoggerToConsole@@YAXPAD@Z")]
            internal static extern void AssetsVerifyLoggerToConsole(sbyte* message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsReaderFromMemory@@YAJPAXI_N@Z")]
            internal static extern int CreateAssetsReaderFromMemory(byte[] buf, uint bufLen, bool copyBuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_AssetsReaderFromMemory@@YAXJ_N@Z")]
            internal static extern void FreeAssetsReaderFromMemory(int lParam, bool freeBuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsReaderFromMemory@@YA_K_K0PAXJ@Z")]
            internal static extern ulong AssetsReaderFromMemory(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsWriterOffset@@YAJP6A_K_K0PBXJ@ZJ0@Z")]
            internal static extern int CreateAssetsWriterOffset(global::System.IntPtr origWriter, int origPar, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_PartialAssetsFileReader@@YAP6A_K_K0PAXJ@ZP6A_K001J@ZPAJ00@Z")]
            internal static extern global::System.IntPtr CreatePartialAssetsFileReader(global::System.IntPtr reader, int* pLPar, ulong rangeBegin, ulong rangeLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?PartialAssetsFileReader@@YA_K_K0PAXJ@Z")]
            internal static extern ulong PartialAssetsFileReader(ulong pos, ulong count, byte[]  pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_PartialAssetsFileReader@@YAXJ@Z")]
            internal static extern void FreePartialAssetsFileReader(int lParam);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_PartialAssetsFileReader@@YAP6A_K_K0PAXJ@ZPAJ@Z")]
            internal static extern global::System.IntPtr FreePartialAssetsFileReader_1(int* pLParam);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsWriterToFile@@YA_K_K0PBXJ@Z")]
            internal static extern ulong AssetsWriterToFile(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsWriterToMemory@@YAJPAXI@Z")]
            internal static extern int CreateAssetsWriterToMemory(byte[] buf, uint bufLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create_AssetsWriterToMemoryDynamic@@YAJXZ")]
            internal static extern int CreateAssetsWriterToMemoryDynamic();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get_AssetsWriterToMemory_Buf@@YAPAXJPAI0@Z")]
            internal static extern global::System.IntPtr GetAssetsWriterToMemoryBuf(int lParam, uint* pPos, uint* pSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_AssetsWriterToMemory@@YAXJ_N@Z")]
            internal static extern void FreeAssetsWriterToMemory(int lParam, bool freeIfDynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_AssetsWriterToMemory_DynMem@@YAXPAX@Z")]
            internal static extern void FreeAssetsWriterToMemoryDynMem(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsWriterToMemory@@YA_K_K0PBXJ@Z")]
            internal static extern ulong AssetsWriterToMemory(ulong pos, ulong count, byte[]  pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsWriterOffset@@YA_K_K0PBXJ@Z")]
            internal static extern ulong AssetsWriterOffset(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Free_AssetsWriterOffset@@YAXJ@Z")]
            internal static extern void FreeAssetsWriterOffset(int lParam);
        }

        public static int CreateAssetsReaderFromSplitFile(string baseFileName)
        {
            var __ret = __Internal.CreateAssetsReaderFromSplitFile(baseFileName);
            return __ret;
        }

        public static int CreateAssetsReaderFromSplitFileW(string baseFileName)
        {
            var __ret = __Internal.CreateAssetsReaderFromSplitFileW(baseFileName);
            return __ret;
        }

        public static void FreeAssetsReaderFromSplitFile(int lParam)
        {
            __Internal.FreeAssetsReaderFromSplitFile(lParam);
        }

        public static ulong AssetsReaderFromSplitFile(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsReaderFromSplitFile(pos, count, pBuf, par);
            return __ret;
        }

        public static ulong AssetsReaderFromFile(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsReaderFromFile(pos, count, pBuf, par);
            return __ret;
        }

        public static void AssetsVerifyLoggerFromFile(sbyte* message)
        {
            __Internal.AssetsVerifyLoggerFromFile(message);
        }

        public static void AssetsVerifyLoggerToConsole(sbyte* message)
        {
            __Internal.AssetsVerifyLoggerToConsole(message);
        }

        public static int CreateAssetsReaderFromMemory(byte[] buf, uint bufLen, bool copyBuf)
        {
            var __ret = __Internal.CreateAssetsReaderFromMemory(buf, bufLen, copyBuf);
            return __ret;
        }

        public static void FreeAssetsReaderFromMemory(int lParam, bool freeBuf)
        {
            __Internal.FreeAssetsReaderFromMemory(lParam, freeBuf);
        }

        public static ulong AssetsReaderFromMemory(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsReaderFromMemory(pos, count, pBuf, par);
            return __ret;
        }

        public static int CreateAssetsWriterOffset(global::UABESharp.AssetsFileWriterDelegate origWriter, int origPar, ulong offset)
        {
            var __arg0 = origWriter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(origWriter);
            var __ret = __Internal.CreateAssetsWriterOffset(__arg0, origPar, offset);
            return __ret;
        }

        public static global::UABESharp.AssetsFileReaderDelegate CreatePartialAssetsFileReader(global::UABESharp.AssetsFileReaderDelegate reader, ref int pLPar, ulong rangeBegin, ulong rangeLength)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (int* __refParamPtr1 = &pLPar)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.CreatePartialAssetsFileReader(__arg0, __arg1, rangeBegin, rangeLength);
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }
        }

        public static ulong PartialAssetsFileReader(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.PartialAssetsFileReader(pos, count, pBuf, par);
            return __ret;
        }

        public static void FreePartialAssetsFileReader(int lParam)
        {
            __Internal.FreePartialAssetsFileReader(lParam);
        }

        public static global::UABESharp.AssetsFileReaderDelegate FreePartialAssetsFileReader(ref int pLParam)
        {
            fixed (int* __refParamPtr0 = &pLParam)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.FreePartialAssetsFileReader_1(__arg0);
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }
        }

        public static ulong AssetsWriterToFile(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsWriterToFile(pos, count, pBuf, par);
            return __ret;
        }

        public static int CreateAssetsWriterToMemory(byte[] buf, uint bufLen)
        {
            var __ret = __Internal.CreateAssetsWriterToMemory(buf, bufLen);
            return __ret;
        }

        public static int CreateAssetsWriterToMemoryDynamic()
        {
            var __ret = __Internal.CreateAssetsWriterToMemoryDynamic();
            return __ret;
        }

        public static global::System.IntPtr GetAssetsWriterToMemoryBuf(int lParam, ref uint pPos, ref uint pSize)
        {
            fixed (uint* __refParamPtr1 = &pPos)
            {
                var __arg1 = __refParamPtr1;
                fixed (uint* __refParamPtr2 = &pSize)
                {
                    var __arg2 = __refParamPtr2;
                    var __ret = __Internal.GetAssetsWriterToMemoryBuf(lParam, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static void FreeAssetsWriterToMemory(int lParam, bool freeIfDynamic)
        {
            __Internal.FreeAssetsWriterToMemory(lParam, freeIfDynamic);
        }

        public static void FreeAssetsWriterToMemoryDynMem(global::System.IntPtr p)
        {
            __Internal.FreeAssetsWriterToMemoryDynMem(p);
        }

        public static ulong AssetsWriterToMemory(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsWriterToMemory(pos, count, pBuf, par);
            return __ret;
        }

        public static ulong AssetsWriterOffset(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsWriterOffset(pos, count, pBuf, par);
            return __ret;
        }

        public static void FreeAssetsWriterOffset(int lParam)
        {
            __Internal.FreeAssetsWriterOffset(lParam);
        }
    }

    public enum BundleReplacementType
    {
        BundleReplacementAddOrModify = 0,
        BundleReplacementRename = 1,
        BundleReplacementRemove = 2
    }

    public unsafe abstract partial class BundleReplacer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_BundleReplacer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0BundleReplacer@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0BundleReplacer@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ReadBundleReplacer@@YAPAVBundleReplacer@@AA_KP6A_K_K1PAXJ@ZJ_N@Z")]
            internal static extern global::System.IntPtr ReadBundleReplacer(ulong* pos, global::System.IntPtr reader, int readerPar, bool prefReplacerInMemory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeBundleEntryRemover@@YAPAVBundleReplacer@@PBD_NI@Z")]
            internal static extern global::System.IntPtr MakeBundleEntryRemover([MarshalAs(UnmanagedType.LPStr)] string name, bool hasSerializedData, uint bundleListIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeBundleEntryRenamer@@YAPAVBundleReplacer@@PBD0_NI@Z")]
            internal static extern global::System.IntPtr MakeBundleEntryRenamer([MarshalAs(UnmanagedType.LPStr)] string oldName, [MarshalAs(UnmanagedType.LPStr)] string newName, bool hasSerializedData, uint bundleListIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeBundleEntryModifier@@YAPAVBundleReplacer@@PBD0_NP6A_K_K2PAXJ@ZJP6AX4J@Z22II@Z")]
            internal static extern global::System.IntPtr MakeBundleEntryModifier([MarshalAs(UnmanagedType.LPStr)] string oldName, [MarshalAs(UnmanagedType.LPStr)] string newName, bool hasSerializedData, global::System.IntPtr reader, int readerPar, global::System.IntPtr freeReaderCallback, ulong size, ulong readerPos, uint copyBufferLen, uint bundleListIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeBundleEntryModifierFromMem@@YAPAVBundleReplacer@@PBD0_NPAXIIP6AX2@Z@Z")]
            internal static extern global::System.IntPtr MakeBundleEntryModifierFromMem([MarshalAs(UnmanagedType.LPStr)] string oldName, [MarshalAs(UnmanagedType.LPStr)] string newName, bool hasSerializedData, global::System.IntPtr pMem, uint size, uint bundleListIndex, global::System.IntPtr freeResourceCallback);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeBundleEntryModifierFromAssets@@YAPAVBundleReplacer@@PBD0PAVAssetsFile@@PAPAVAssetsReplacer@@IKI@Z")]
            internal static extern global::System.IntPtr MakeBundleEntryModifierFromAssets([MarshalAs(UnmanagedType.LPStr)] string oldName, [MarshalAs(UnmanagedType.LPStr)] string newName, global::System.IntPtr pAssetsFile, global::System.IntPtr pReplacers, uint replacerCount, uint fileId, uint bundleListIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FreeBundleReplacer@@YAXPAVBundleReplacer@@@Z")]
            internal static extern void FreeBundleReplacer(global::System.IntPtr pReplacer);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.BundleReplacer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.BundleReplacer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.BundleReplacer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.BundleReplacerInternal(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.BundleReplacer __CreateInstance(global::UABESharp.BundleReplacer.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.BundleReplacerInternal(native, skipVTables);
        }

        protected BundleReplacer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected BundleReplacer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.BundleReplacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.BundleReplacer");
        }

        protected BundleReplacer(global::UABESharp.BundleReplacer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.BundleReplacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "UABE_2_1d_x86.BundleReplacer");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.BundleReplacer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::UABESharp.BundleReplacer.__Internal*) __Instance)->vfptr_BundleReplacer = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract bool Init(global::UABESharp.AssetsBundleFile pBundleFile, global::UABESharp.AssetsFileReaderDelegate entryReader, int entryReaderPar, ulong entryPos, ulong entrySize, global::UABESharp.ClassDatabaseFile typeMeta);

        public abstract void Uninit();

        public abstract ulong Write(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar);

        public abstract ulong WriteReplacer(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar);

        public static global::UABESharp.BundleReplacer ReadBundleReplacer(ref ulong pos, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool prefReplacerInMemory)
        {
            fixed (ulong* __refParamPtr0 = &pos)
            {
                var __arg0 = __refParamPtr0;
                var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
                var __ret = __Internal.ReadBundleReplacer(__arg0, __arg1, readerPar, prefReplacerInMemory);
                global::UABESharp.BundleReplacer __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
                else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::UABESharp.BundleReplacer MakeBundleEntryRemover(string name, bool hasSerializedData, uint bundleListIndex)
        {
            var __ret = __Internal.MakeBundleEntryRemover(name, hasSerializedData, bundleListIndex);
            global::UABESharp.BundleReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.BundleReplacer MakeBundleEntryRenamer(string oldName, string newName, bool hasSerializedData, uint bundleListIndex)
        {
            var __ret = __Internal.MakeBundleEntryRenamer(oldName, newName, hasSerializedData, bundleListIndex);
            global::UABESharp.BundleReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.BundleReplacer MakeBundleEntryModifier(string oldName, string newName, bool hasSerializedData, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, global::UABESharp.CbFreeReaderResourceDelegate freeReaderCallback, ulong size, ulong readerPos, uint copyBufferLen, uint bundleListIndex)
        {
            var __arg3 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg5 = freeReaderCallback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(freeReaderCallback);
            var __ret = __Internal.MakeBundleEntryModifier(oldName, newName, hasSerializedData, __arg3, readerPar, __arg5, size, readerPos, copyBufferLen, bundleListIndex);
            global::UABESharp.BundleReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.BundleReplacer MakeBundleEntryModifierFromMem(string oldName, string newName, bool hasSerializedData, global::System.IntPtr pMem, uint size, uint bundleListIndex, global::UABESharp.CbFreeMemoryResourceDelegate freeResourceCallback)
        {
            var __arg6 = freeResourceCallback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(freeResourceCallback);
            var __ret = __Internal.MakeBundleEntryModifierFromMem(oldName, newName, hasSerializedData, pMem, size, bundleListIndex, __arg6);
            global::UABESharp.BundleReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::UABESharp.BundleReplacer MakeBundleEntryModifierFromAssets(string oldName, string newName, global::UABESharp.AssetsFile pAssetsFile, global::UABESharp.AssetsReplacer pReplacers, uint replacerCount, uint fileId, uint bundleListIndex)
        {
            var __arg2 = ReferenceEquals(pAssetsFile, null) ? global::System.IntPtr.Zero : pAssetsFile.__Instance;
            var __arg3 = ReferenceEquals(pReplacers, null) ? global::System.IntPtr.Zero : pReplacers.__Instance;
            var __ret = __Internal.MakeBundleEntryModifierFromAssets(oldName, newName, __arg2, __arg3, replacerCount, fileId, bundleListIndex);
            global::UABESharp.BundleReplacer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.BundleReplacer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.NativeToManagedMap[__ret];
            else global::UABESharp.BundleReplacer.NativeToManagedMap[__ret] = __result0 = (global::UABESharp.BundleReplacer) global::UABESharp.BundleReplacer.__CreateInstance(__ret);
            return __result0;
        }

        public static void FreeBundleReplacer(global::UABESharp.BundleReplacer pReplacer)
        {
            var __arg0 = ReferenceEquals(pReplacer, null) ? global::System.IntPtr.Zero : pReplacer.__Instance;
            __Internal.FreeBundleReplacer(__arg0);
        }

        public abstract global::UABESharp.BundleReplacementType Type
        {
            get;
        }

        public abstract uint BundleListIndex
        {
            get;
        }

        public abstract string OriginalEntryName
        {
            get;
        }

        public abstract string EntryName
        {
            get;
        }

        public abstract ulong Size
        {
            get;
        }

        public abstract bool HasSerializedData
        {
            get;
        }

        #region Virtual table interop

        // BundleReplacementType GetType() = 0
        private static global::UABESharp.Delegates.Func_UABE_2_1d_x86_BundleReplacementType_IntPtr _GetTypeDelegateInstance;

        private static global::UABESharp.BundleReplacementType _GetTypeDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Type;
            return __ret;
        }

        // virtual ~BundleReplacer() #ifndef ASSETSTOOLS_EXPORTS = 0
        private static global::UABESharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // unsigned int GetBundleListIndex() = 0
        private static global::UABESharp.Delegates.Func_uint_IntPtr _GetBundleListIndexDelegateInstance;

        private static uint _GetBundleListIndexDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.BundleListIndex;
            return __ret;
        }

        // char *GetOriginalEntryName() = 0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetOriginalEntryNameDelegateInstance;

        private static global::System.IntPtr _GetOriginalEntryNameDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OriginalEntryName;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // char *GetEntryName() = 0
        private static global::UABESharp.Delegates.Func_IntPtr_IntPtr _GetEntryNameDelegateInstance;

        private static global::System.IntPtr _GetEntryNameDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.EntryName;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // QWORD GetSize() = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr _GetSizeDelegateInstance;

        private static ulong _GetSizeDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Size;
            return __ret;
        }

        // bool Init(class AssetsBundleFile *pBundleFile, AssetsFileReader entryReader, LPARAM entryReaderPar, QWORD entryPos, QWORD entrySize, ClassDatabaseFile *typeMeta = NULL) = 0
        private static global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int_ulong_ulong_IntPtr _InitDelegateInstance;

        private static bool _InitDelegateHook(global::System.IntPtr instance, global::System.IntPtr pBundleFile, global::System.IntPtr entryReader, int entryReaderPar, ulong entryPos, ulong entrySize, global::System.IntPtr typeMeta)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::UABESharp.AssetsBundleFile __result0;
            if (pBundleFile == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetsBundleFile.NativeToManagedMap.ContainsKey(pBundleFile))
                __result0 = (global::UABESharp.AssetsBundleFile) global::UABESharp.AssetsBundleFile.NativeToManagedMap[pBundleFile];
            else __result0 = global::UABESharp.AssetsBundleFile.__CreateInstance(pBundleFile);
            var __ptr1 = entryReader;
            global::UABESharp.ClassDatabaseFile __result5;
            if (typeMeta == IntPtr.Zero) __result5 = null;
            else if (global::UABESharp.ClassDatabaseFile.NativeToManagedMap.ContainsKey(typeMeta))
                __result5 = (global::UABESharp.ClassDatabaseFile) global::UABESharp.ClassDatabaseFile.NativeToManagedMap[typeMeta];
            else __result5 = global::UABESharp.ClassDatabaseFile.__CreateInstance(typeMeta);
            var __ret = __target.Init(__result0, __ptr1 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr1, typeof(global::UABESharp.AssetsFileReaderDelegate)), entryReaderPar, entryPos, entrySize, __result5);
            return __ret;
        }

        // void Uninit() = 0
        private static global::UABESharp.Delegates.Action_IntPtr _UninitDelegateInstance;

        private static void _UninitDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Uninit();
        }

        // QWORD Write(QWORD pos, AssetsFileWriter writer, LPARAM writerPar) = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int _WriteDelegateInstance;

        private static ulong _WriteDelegateHook(global::System.IntPtr instance, ulong pos, global::System.IntPtr writer, int writerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr1 = writer;
            var __ret = __target.Write(pos, __ptr1 == IntPtr.Zero? null : (global::UABESharp.AssetsFileWriterDelegate) Marshal.GetDelegateForFunctionPointer(__ptr1, typeof(global::UABESharp.AssetsFileWriterDelegate)), writerPar);
            return __ret;
        }

        // QWORD WriteReplacer(QWORD pos, AssetsFileWriter writer, LPARAM writerPar) = 0
        private static global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int _WriteReplacerDelegateInstance;

        private static ulong _WriteReplacerDelegateHook(global::System.IntPtr instance, ulong pos, global::System.IntPtr writer, int writerPar)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ptr1 = writer;
            var __ret = __target.WriteReplacer(pos, __ptr1 == IntPtr.Zero? null : (global::UABESharp.AssetsFileWriterDelegate) Marshal.GetDelegateForFunctionPointer(__ptr1, typeof(global::UABESharp.AssetsFileWriterDelegate)), writerPar);
            return __ret;
        }

        // bool HasSerializedData() = 0
        private static global::UABESharp.Delegates.Func_bool_IntPtr _HasSerializedDataDelegateInstance;

        private static bool _HasSerializedDataDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::UABESharp.BundleReplacer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.HasSerializedData;
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[11];
                _GetTypeDelegateInstance += _GetTypeDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetTypeDelegateInstance).ToPointer();
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetBundleListIndexDelegateInstance += _GetBundleListIndexDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetBundleListIndexDelegateInstance).ToPointer();
                _GetOriginalEntryNameDelegateInstance += _GetOriginalEntryNameDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetOriginalEntryNameDelegateInstance).ToPointer();
                _GetEntryNameDelegateInstance += _GetEntryNameDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEntryNameDelegateInstance).ToPointer();
                _GetSizeDelegateInstance += _GetSizeDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSizeDelegateInstance).ToPointer();
                _InitDelegateInstance += _InitDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_InitDelegateInstance).ToPointer();
                _UninitDelegateInstance += _UninitDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_UninitDelegateInstance).ToPointer();
                _WriteDelegateInstance += _WriteDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_WriteDelegateInstance).ToPointer();
                _WriteReplacerDelegateInstance += _WriteReplacerDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_WriteReplacerDelegateInstance).ToPointer();
                _HasSerializedDataDelegateInstance += _HasSerializedDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_HasSerializedDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(11 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[1];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(11 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = _Thunks[0];
                    *(void**) (vfptr0 + 4) = _Thunks[1];
                    *(void**) (vfptr0 + 8) = _Thunks[2];
                    *(void**) (vfptr0 + 12) = _Thunks[3];
                    *(void**) (vfptr0 + 16) = _Thunks[4];
                    *(void**) (vfptr0 + 20) = _Thunks[5];
                    *(void**) (vfptr0 + 24) = _Thunks[6];
                    *(void**) (vfptr0 + 28) = _Thunks[7];
                    *(void**) (vfptr0 + 32) = _Thunks[8];
                    *(void**) (vfptr0 + 36) = _Thunks[9];
                    *(void**) (vfptr0 + 40) = _Thunks[10];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class BundleReplacerInternal : global::UABESharp.BundleReplacer, IDisposable
    {
        private static void* __CopyValue(global::UABESharp.BundleReplacer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.BundleReplacer.__Internal));
            *(global::UABESharp.BundleReplacer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal BundleReplacerInternal(global::UABESharp.BundleReplacer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal BundleReplacerInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override bool Init(global::UABESharp.AssetsBundleFile pBundleFile, global::UABESharp.AssetsFileReaderDelegate entryReader, int entryReaderPar, ulong entryPos, ulong entrySize, global::UABESharp.ClassDatabaseFile typeMeta)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___InitDelegate = (global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int_ulong_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int_ulong_ulong_IntPtr));
            var __arg0 = ReferenceEquals(pBundleFile, null) ? global::System.IntPtr.Zero : pBundleFile.__Instance;
            var __arg1 = entryReader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(entryReader);
            var __arg5 = ReferenceEquals(typeMeta, null) ? global::System.IntPtr.Zero : typeMeta.__Instance;
            var __ret = ___InitDelegate((__Instance + __PointerAdjustment), __arg0, __arg1, entryReaderPar, entryPos, entrySize, __arg5);
            return __ret;
        }

        public override void Uninit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___UninitDelegate = (global::UABESharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Action_IntPtr));
            ___UninitDelegate((__Instance + __PointerAdjustment));
        }

        public override ulong Write(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___WriteDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int));
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = ___WriteDelegate((__Instance + __PointerAdjustment), pos, __arg1, writerPar);
            return __ret;
        }

        public override ulong WriteReplacer(ulong pos, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___WriteReplacerDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr_ulong_IntPtr_int));
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = ___WriteReplacerDelegate((__Instance + __PointerAdjustment), pos, __arg1, writerPar);
            return __ret;
        }

        public override global::UABESharp.BundleReplacementType Type
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___GetTypeDelegate = (global::UABESharp.Delegates.Func_UABE_2_1d_x86_BundleReplacementType_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_UABE_2_1d_x86_BundleReplacementType_IntPtr));
                var __ret = ___GetTypeDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override uint BundleListIndex
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
                var ___GetBundleListIndexDelegate = (global::UABESharp.Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_uint_IntPtr));
                var __ret = ___GetBundleListIndexDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override string OriginalEntryName
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetOriginalEntryNameDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetOriginalEntryNameDelegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public override string EntryName
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
                var ___GetEntryNameDelegate = (global::UABESharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetEntryNameDelegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public override ulong Size
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
                var ___GetSizeDelegate = (global::UABESharp.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_ulong_IntPtr));
                var __ret = ___GetSizeDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public override bool HasSerializedData
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
                var ___HasSerializedDataDelegate = (global::UABESharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UABESharp.Delegates.Func_bool_IntPtr));
                var __ret = ___HasSerializedDataDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetsBundleFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 104)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.AssetsBundleFile._.__Internal _;

            [FieldOffset(96)]
            internal global::UABESharp.AssetsBundleFile._.__Internal _1;

            [FieldOffset(100)]
            internal uint listCount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleFile@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleFile@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetsBundleFile@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Close@AssetsBundleFile@@QAEXXZ")]
            internal static extern void Close(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJP6AXPAD@Z_N@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr errorLogger, bool allowCompressed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJP6A_K00PBXJ@ZJPAPAVBundleReplacer@@IP6AXPAD@ZPAVClassDatabaseFile@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, global::System.IntPtr writer, int writerPar, global::System.IntPtr pReplacers, uint replacerCount, global::System.IntPtr errorLogger, global::System.IntPtr typeMeta);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Unpack@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJP6A_K00PBXJ@ZJ@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Unpack(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr writer, int writerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Pack@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJP6A_K00PBXJ@ZJ@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Pack(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr writer, int writerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsAssetsFile@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJPAUAssetsBundleDirectoryInfo06@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAssetsFile(global::System.IntPtr instance, global::System.IntPtr reader, int pLPar, global::System.IntPtr pEntry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsAssetsFile@AssetsBundleFile@@QAE_NP6A_K_K0PAXJ@ZJPAUAssetsBundleEntry@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAssetsFile_1(global::System.IntPtr instance, global::System.IntPtr reader, int pLPar, global::System.IntPtr pEntry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MakeAssetsFileReader@AssetsBundleFile@@QAEP6A_K_K0PAXJ@ZP6A_K001J@ZPAJPAUAssetsBundleDirectoryInfo06@@@Z")]
            internal static extern global::System.IntPtr MakeAssetsFileReader(global::System.IntPtr instance, global::System.IntPtr reader, int* pLPar, global::System.IntPtr pEntry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MakeAssetsFileReader@AssetsBundleFile@@QAEP6A_K_K0PAXJ@ZP6A_K001J@ZPAJPAUAssetsBundleEntry@@@Z")]
            internal static extern global::System.IntPtr MakeAssetsFileReader_1(global::System.IntPtr instance, global::System.IntPtr reader, int* pLPar, global::System.IntPtr pEntry);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 96)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::UABESharp.AssetsBundleHeader03.__Internal bundleHeader3;

                [FieldOffset(0)]
                internal global::UABESharp.AssetsBundleHeader06.__Internal bundleHeader6;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleFile __CreateInstance(global::UABESharp.AssetsBundleFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFile.__Internal));
            *(global::UABESharp.AssetsBundleFile.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleFile(global::UABESharp.AssetsBundleFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public AssetsBundleFile(global::UABESharp.AssetsBundleFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleFile.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Close()
        {
            __Internal.Close((__Instance + __PointerAdjustment));
        }

        public bool Read(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger, bool allowCompressed)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, allowCompressed);
            return __ret;
        }

        public bool Write(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, global::UABESharp.BundleReplacer pReplacers, uint replacerCount, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger, global::UABESharp.ClassDatabaseFile typeMeta)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __arg4 = ReferenceEquals(pReplacers, null) ? global::System.IntPtr.Zero : pReplacers.__Instance;
            var __arg6 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __arg7 = ReferenceEquals(typeMeta, null) ? global::System.IntPtr.Zero : typeMeta.__Instance;
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, readerPar, __arg2, writerPar, __arg4, replacerCount, __arg6, __arg7);
            return __ret;
        }

        public bool Unpack(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Unpack((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, writerPar);
            return __ret;
        }

        public bool Pack(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Pack((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, writerPar);
            return __ret;
        }

        public bool IsAssetsFile(global::UABESharp.AssetsFileReaderDelegate reader, int pLPar, global::UABESharp.AssetsBundleDirectoryInfo06 pEntry)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = ReferenceEquals(pEntry, null) ? global::System.IntPtr.Zero : pEntry.__Instance;
            var __ret = __Internal.IsAssetsFile((__Instance + __PointerAdjustment), __arg0, pLPar, __arg2);
            return __ret;
        }

        public bool IsAssetsFile(global::UABESharp.AssetsFileReaderDelegate reader, int pLPar, global::UABESharp.AssetsBundleEntry pEntry)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = ReferenceEquals(pEntry, null) ? global::System.IntPtr.Zero : pEntry.__Instance;
            var __ret = __Internal.IsAssetsFile_1((__Instance + __PointerAdjustment), __arg0, pLPar, __arg2);
            return __ret;
        }

        public global::UABESharp.AssetsFileReaderDelegate MakeAssetsFileReader(global::UABESharp.AssetsFileReaderDelegate reader, ref int pLPar, global::UABESharp.AssetsBundleDirectoryInfo06 pEntry)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (int* __refParamPtr1 = &pLPar)
            {
                var __arg1 = __refParamPtr1;
                var __arg2 = ReferenceEquals(pEntry, null) ? global::System.IntPtr.Zero : pEntry.__Instance;
                var __ret = __Internal.MakeAssetsFileReader((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }
        }

        public global::UABESharp.AssetsFileReaderDelegate MakeAssetsFileReader(global::UABESharp.AssetsFileReaderDelegate reader, ref int pLPar, global::UABESharp.AssetsBundleEntry pEntry)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (int* __refParamPtr1 = &pLPar)
            {
                var __arg1 = __refParamPtr1;
                var __arg2 = ReferenceEquals(pEntry, null) ? global::System.IntPtr.Zero : pEntry.__Instance;
                var __ret = __Internal.MakeAssetsFileReader_1((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }
        }

        public uint ListCount
        {
            get
            {
                return ((global::UABESharp.AssetsBundleFile.__Internal*) __Instance)->listCount;
            }

            set
            {
                ((global::UABESharp.AssetsBundleFile.__Internal*)__Instance)->listCount = value;
            }
        }
    }

    public unsafe partial class AssetsBundleHeader03 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte signature[13];

            [FieldOffset(16)]
            internal uint fileVersion;

            [FieldOffset(20)]
            internal fixed sbyte minPlayerVersion[20];

            [FieldOffset(40)]
            internal fixed sbyte fileEngineVersion[20];

            [FieldOffset(60)]
            internal uint minimumStreamedBytes;

            [FieldOffset(64)]
            internal uint bundleDataOffs;

            [FieldOffset(68)]
            internal uint numberOfAssetsToDownload;

            [FieldOffset(72)]
            internal uint levelCount;

            [FieldOffset(76)]
            internal global::System.IntPtr pLevelList;

            [FieldOffset(80)]
            internal uint fileSize2;

            [FieldOffset(84)]
            internal uint unknown2;

            [FieldOffset(88)]
            internal byte unknown3;

            [FieldOffset(92)]
            internal uint bundleCount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleHeader03@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsBundleHeader03@@QAE_NP6A_K_K0PAXJ@ZJP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsBundleHeader03@@QAE_NP6A_K_K0PBXJ@ZJAA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr writer, int lPar, ulong* curFilePos, global::System.IntPtr errorLogger);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleHeader03> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleHeader03>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleHeader03 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleHeader03(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleHeader03 __CreateInstance(global::UABESharp.AssetsBundleHeader03.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleHeader03(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleHeader03.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader03.__Internal));
            *(global::UABESharp.AssetsBundleHeader03.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleHeader03(global::UABESharp.AssetsBundleHeader03.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleHeader03(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleHeader03(global::UABESharp.AssetsBundleHeader03 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader03.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleHeader03.__Internal*) _0.__Instance);
        }

        public AssetsBundleHeader03()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader03.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleHeader03 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool Read(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, lPar, __arg2);
            return __ret;
        }

        public bool Write(global::UABESharp.AssetsFileWriterDelegate writer, int lPar, ref ulong curFilePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            fixed (ulong* __refParamPtr2 = &curFilePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, __arg3);
                return __ret;
            }
        }

        public sbyte[] Signature
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->signature != null)
                {
                    __value = new sbyte[13];
                    for (int i = 0; i < 13; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->signature[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 13; i++)
                        ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->signature[i] = value[i];
                }
            }
        }

        public uint FileVersion
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->fileVersion;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->fileVersion = value;
            }
        }

        public sbyte[] MinPlayerVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->minPlayerVersion != null)
                {
                    __value = new sbyte[20];
                    for (int i = 0; i < 20; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->minPlayerVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->minPlayerVersion[i] = value[i];
                }
            }
        }

        public sbyte[] FileEngineVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->fileEngineVersion != null)
                {
                    __value = new sbyte[20];
                    for (int i = 0; i < 20; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->fileEngineVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->fileEngineVersion[i] = value[i];
                }
            }
        }

        public uint MinimumStreamedBytes
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->minimumStreamedBytes;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->minimumStreamedBytes = value;
            }
        }

        public uint BundleDataOffs
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->bundleDataOffs;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->bundleDataOffs = value;
            }
        }

        public uint NumberOfAssetsToDownload
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->numberOfAssetsToDownload;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->numberOfAssetsToDownload = value;
            }
        }

        public uint LevelCount
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->levelCount;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->levelCount = value;
            }
        }

        public global::UABESharp.AssetsBundleOffsetPair PLevelList
        {
            get
            {
                global::UABESharp.AssetsBundleOffsetPair __result0;
                if (((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->pLevelList == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleOffsetPair.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->pLevelList))
                    __result0 = (global::UABESharp.AssetsBundleOffsetPair) global::UABESharp.AssetsBundleOffsetPair.NativeToManagedMap[((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->pLevelList];
                else __result0 = global::UABESharp.AssetsBundleOffsetPair.__CreateInstance(((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->pLevelList);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->pLevelList = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint FileSize2
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->fileSize2;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->fileSize2 = value;
            }
        }

        public uint Unknown2
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->unknown2;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->unknown2 = value;
            }
        }

        public byte Unknown3
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->unknown3;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->unknown3 = value;
            }
        }

        public uint BundleCount
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader03.__Internal*) __Instance)->bundleCount;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader03.__Internal*)__Instance)->bundleCount = value;
            }
        }
    }

    public unsafe partial class AssetsBundleOffsetPair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint compressed;

            [FieldOffset(4)]
            internal uint uncompressed;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleOffsetPair@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleOffsetPair> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleOffsetPair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleOffsetPair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleOffsetPair(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleOffsetPair __CreateInstance(global::UABESharp.AssetsBundleOffsetPair.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleOffsetPair(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleOffsetPair.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleOffsetPair.__Internal));
            *(global::UABESharp.AssetsBundleOffsetPair.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleOffsetPair(global::UABESharp.AssetsBundleOffsetPair.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleOffsetPair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleOffsetPair()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleOffsetPair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleOffsetPair(global::UABESharp.AssetsBundleOffsetPair _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleOffsetPair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleOffsetPair.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleOffsetPair.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleOffsetPair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Compressed
        {
            get
            {
                return ((global::UABESharp.AssetsBundleOffsetPair.__Internal*) __Instance)->compressed;
            }

            set
            {
                ((global::UABESharp.AssetsBundleOffsetPair.__Internal*)__Instance)->compressed = value;
            }
        }

        public uint Uncompressed
        {
            get
            {
                return ((global::UABESharp.AssetsBundleOffsetPair.__Internal*) __Instance)->uncompressed;
            }

            set
            {
                ((global::UABESharp.AssetsBundleOffsetPair.__Internal*)__Instance)->uncompressed = value;
            }
        }
    }

    public unsafe partial class AssetsBundleHeader06 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte signature[13];

            [FieldOffset(16)]
            internal uint fileVersion;

            [FieldOffset(20)]
            internal fixed sbyte minPlayerVersion[20];

            [FieldOffset(40)]
            internal fixed sbyte fileEngineVersion[20];

            [FieldOffset(64)]
            internal ulong totalFileSize;

            [FieldOffset(72)]
            internal uint compressedSize;

            [FieldOffset(76)]
            internal uint decompressedSize;

            [FieldOffset(80)]
            internal uint flags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleHeader06@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ReadInitial@AssetsBundleHeader06@@QAE_NP6A_K_K0PAXJ@ZJP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadInitial(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsBundleHeader06@@QAE_NP6A_K_K0PAXJ@ZJP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, global::System.IntPtr reader, int lPar, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsBundleHeader06@@QAE_NP6A_K_K0PBXJ@ZJAA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr writer, int lPar, ulong* curFilePos, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBundleInfoOffset@AssetsBundleHeader06@@QAE_KXZ")]
            internal static extern ulong GetBundleInfoOffset(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileDataOffset@AssetsBundleHeader06@@QAEKXZ")]
            internal static extern uint GetFileDataOffset(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleHeader06> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleHeader06>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleHeader06 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleHeader06(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleHeader06 __CreateInstance(global::UABESharp.AssetsBundleHeader06.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleHeader06(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleHeader06.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader06.__Internal));
            *(global::UABESharp.AssetsBundleHeader06.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleHeader06(global::UABESharp.AssetsBundleHeader06.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleHeader06(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleHeader06(global::UABESharp.AssetsBundleHeader06 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleHeader06.__Internal*) _0.__Instance);
        }

        public AssetsBundleHeader06()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleHeader06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleHeader06 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool ReadInitial(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __ret = __Internal.ReadInitial((__Instance + __PointerAdjustment), __arg0, lPar, __arg2);
            return __ret;
        }

        public bool Read(global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, lPar, __arg2);
            return __ret;
        }

        public bool Write(global::UABESharp.AssetsFileWriterDelegate writer, int lPar, ref ulong curFilePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            fixed (ulong* __refParamPtr2 = &curFilePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, __arg3);
                return __ret;
            }
        }

        public sbyte[] Signature
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->signature != null)
                {
                    __value = new sbyte[13];
                    for (int i = 0; i < 13; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->signature[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 13; i++)
                        ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->signature[i] = value[i];
                }
            }
        }

        public uint FileVersion
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->fileVersion;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->fileVersion = value;
            }
        }

        public sbyte[] MinPlayerVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->minPlayerVersion != null)
                {
                    __value = new sbyte[20];
                    for (int i = 0; i < 20; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->minPlayerVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->minPlayerVersion[i] = value[i];
                }
            }
        }

        public sbyte[] FileEngineVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->fileEngineVersion != null)
                {
                    __value = new sbyte[20];
                    for (int i = 0; i < 20; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->fileEngineVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->fileEngineVersion[i] = value[i];
                }
            }
        }

        public ulong TotalFileSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->totalFileSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->totalFileSize = value;
            }
        }

        public uint CompressedSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->compressedSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->compressedSize = value;
            }
        }

        public uint DecompressedSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->decompressedSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->decompressedSize = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::UABESharp.AssetsBundleHeader06.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::UABESharp.AssetsBundleHeader06.__Internal*)__Instance)->flags = value;
            }
        }

        public ulong BundleInfoOffset
        {
            get
            {
                var __ret = __Internal.GetBundleInfoOffset((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint FileDataOffset
        {
            get
            {
                var __ret = __Internal.GetFileDataOffset((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetsBundleDirectoryInfo06 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong offset;

            [FieldOffset(8)]
            internal ulong decompressedSize;

            [FieldOffset(16)]
            internal uint flags;

            [FieldOffset(20)]
            internal global::System.IntPtr name;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleDirectoryInfo06@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAbsolutePos@AssetsBundleDirectoryInfo06@@QAE_KPAUAssetsBundleHeader06@@@Z")]
            internal static extern ulong GetAbsolutePos(global::System.IntPtr instance, global::System.IntPtr pHeader);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAbsolutePos@AssetsBundleDirectoryInfo06@@QAE_KPAVAssetsBundleFile@@@Z")]
            internal static extern ulong GetAbsolutePos_1(global::System.IntPtr instance, global::System.IntPtr pFile);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleDirectoryInfo06> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleDirectoryInfo06>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleDirectoryInfo06 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleDirectoryInfo06(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleDirectoryInfo06 __CreateInstance(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleDirectoryInfo06(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal));
            *(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleDirectoryInfo06(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleDirectoryInfo06(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleDirectoryInfo06()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleDirectoryInfo06(global::UABESharp.AssetsBundleDirectoryInfo06 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleDirectoryInfo06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleDirectoryInfo06 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong GetAbsolutePos(global::UABESharp.AssetsBundleHeader06 pHeader)
        {
            var __arg0 = ReferenceEquals(pHeader, null) ? global::System.IntPtr.Zero : pHeader.__Instance;
            var __ret = __Internal.GetAbsolutePos((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public ulong GetAbsolutePos(global::UABESharp.AssetsBundleFile pFile)
        {
            var __arg0 = ReferenceEquals(pFile, null) ? global::System.IntPtr.Zero : pFile.__Instance;
            var __ret = __Internal.GetAbsolutePos_1((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public ulong Offset
        {
            get
            {
                return ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) __Instance)->offset;
            }

            set
            {
                ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*)__Instance)->offset = value;
            }
        }

        public ulong DecompressedSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) __Instance)->decompressedSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*)__Instance)->decompressedSize = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*)__Instance)->flags = value;
            }
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::UABESharp.AssetsBundleDirectoryInfo06.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class AssetsBundleEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint offset;

            [FieldOffset(4)]
            internal uint length;

            [FieldOffset(8)]
            internal fixed sbyte name[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleEntry@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAbsolutePos@AssetsBundleEntry@@QAEIPAUAssetsBundleHeader03@@@Z")]
            internal static extern uint GetAbsolutePos(global::System.IntPtr instance, global::System.IntPtr pHeader);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAbsolutePos@AssetsBundleEntry@@QAEIPAVAssetsBundleFile@@@Z")]
            internal static extern uint GetAbsolutePos_1(global::System.IntPtr instance, global::System.IntPtr pFile);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleEntry>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleEntry(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleEntry __CreateInstance(global::UABESharp.AssetsBundleEntry.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleEntry.__Internal));
            *(global::UABESharp.AssetsBundleEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleEntry(global::UABESharp.AssetsBundleEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleEntry(global::UABESharp.AssetsBundleEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleEntry.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint GetAbsolutePos(global::UABESharp.AssetsBundleHeader03 pHeader)
        {
            var __arg0 = ReferenceEquals(pHeader, null) ? global::System.IntPtr.Zero : pHeader.__Instance;
            var __ret = __Internal.GetAbsolutePos((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public uint GetAbsolutePos(global::UABESharp.AssetsBundleFile pFile)
        {
            var __arg0 = ReferenceEquals(pFile, null) ? global::System.IntPtr.Zero : pFile.__Instance;
            var __ret = __Internal.GetAbsolutePos_1((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public uint Offset
        {
            get
            {
                return ((global::UABESharp.AssetsBundleEntry.__Internal*) __Instance)->offset;
            }

            set
            {
                ((global::UABESharp.AssetsBundleEntry.__Internal*)__Instance)->offset = value;
            }
        }

        public uint Length
        {
            get
            {
                return ((global::UABESharp.AssetsBundleEntry.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::UABESharp.AssetsBundleEntry.__Internal*)__Instance)->length = value;
            }
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetsBundleEntry.__Internal*) __Instance)->name != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::UABESharp.AssetsBundleEntry.__Internal*) __Instance)->name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::UABESharp.AssetsBundleEntry.__Internal*)__Instance)->name[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class AssetsBundleList
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleList(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleList __CreateInstance(global::UABESharp.AssetsBundleList.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleList(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleList.__Internal));
            *(global::UABESharp.AssetsBundleList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleList(global::UABESharp.AssetsBundleList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AssetsBundleBlockInfo06 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint decompressedSize;

            [FieldOffset(4)]
            internal uint compressedSize;

            [FieldOffset(8)]
            internal ushort flags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleBlockInfo06@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCompressionType@AssetsBundleBlockInfo06@@QAEEXZ")]
            internal static extern byte GetCompressionType(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleBlockInfo06> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleBlockInfo06>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleBlockInfo06 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleBlockInfo06(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleBlockInfo06 __CreateInstance(global::UABESharp.AssetsBundleBlockInfo06.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleBlockInfo06(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleBlockInfo06.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockInfo06.__Internal));
            *(global::UABESharp.AssetsBundleBlockInfo06.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleBlockInfo06(global::UABESharp.AssetsBundleBlockInfo06.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleBlockInfo06(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleBlockInfo06()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockInfo06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleBlockInfo06(global::UABESharp.AssetsBundleBlockInfo06 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockInfo06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleBlockInfo06.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleBlockInfo06.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleBlockInfo06 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DecompressedSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*) __Instance)->decompressedSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*)__Instance)->decompressedSize = value;
            }
        }

        public uint CompressedSize
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*) __Instance)->compressedSize;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*)__Instance)->compressedSize = value;
            }
        }

        public ushort Flags
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockInfo06.__Internal*)__Instance)->flags = value;
            }
        }

        public byte CompressionType
        {
            get
            {
                var __ret = __Internal.GetCompressionType((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetsBundleBlockAndDirectoryList06 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong checksumLow;

            [FieldOffset(8)]
            internal ulong checksumHigh;

            [FieldOffset(16)]
            internal uint blockCount;

            [FieldOffset(20)]
            internal global::System.IntPtr blockInf;

            [FieldOffset(24)]
            internal uint directoryCount;

            [FieldOffset(28)]
            internal global::System.IntPtr dirInf;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleBlockAndDirectoryList06@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Free@AssetsBundleBlockAndDirectoryList06@@QAEXXZ")]
            internal static extern void Free(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsBundleBlockAndDirectoryList06@@QAE_N_KP6A_K00PAXJ@ZJP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, ulong filePos, global::System.IntPtr reader, int lPar, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsBundleBlockAndDirectoryList06@@QAE_NP6A_K_K0PBXJ@ZJAA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr writer, int lPar, ulong* curFilePos, global::System.IntPtr errorLogger);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleBlockAndDirectoryList06> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleBlockAndDirectoryList06>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleBlockAndDirectoryList06 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleBlockAndDirectoryList06(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleBlockAndDirectoryList06 __CreateInstance(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleBlockAndDirectoryList06(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal));
            *(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleBlockAndDirectoryList06(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleBlockAndDirectoryList06(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleBlockAndDirectoryList06()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleBlockAndDirectoryList06(global::UABESharp.AssetsBundleBlockAndDirectoryList06 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleBlockAndDirectoryList06 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Free()
        {
            __Internal.Free((__Instance + __PointerAdjustment));
        }

        public bool Read(ulong filePos, global::UABESharp.AssetsFileReaderDelegate reader, int lPar, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
            var __ret = __Internal.Read((__Instance + __PointerAdjustment), filePos, __arg1, lPar, __arg3);
            return __ret;
        }

        public bool Write(global::UABESharp.AssetsFileWriterDelegate writer, int lPar, ref ulong curFilePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            fixed (ulong* __refParamPtr2 = &curFilePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, lPar, __arg2, __arg3);
                return __ret;
            }
        }

        public ulong ChecksumLow
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->checksumLow;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->checksumLow = value;
            }
        }

        public ulong ChecksumHigh
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->checksumHigh;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->checksumHigh = value;
            }
        }

        public uint BlockCount
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->blockCount;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->blockCount = value;
            }
        }

        public global::UABESharp.AssetsBundleBlockInfo06 BlockInf
        {
            get
            {
                global::UABESharp.AssetsBundleBlockInfo06 __result0;
                if (((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->blockInf == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleBlockInfo06.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->blockInf))
                    __result0 = (global::UABESharp.AssetsBundleBlockInfo06) global::UABESharp.AssetsBundleBlockInfo06.NativeToManagedMap[((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->blockInf];
                else __result0 = global::UABESharp.AssetsBundleBlockInfo06.__CreateInstance(((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->blockInf);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->blockInf = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint DirectoryCount
        {
            get
            {
                return ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->directoryCount;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->directoryCount = value;
            }
        }

        public global::UABESharp.AssetsBundleDirectoryInfo06 DirInf
        {
            get
            {
                global::UABESharp.AssetsBundleDirectoryInfo06 __result0;
                if (((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->dirInf == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleDirectoryInfo06.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->dirInf))
                    __result0 = (global::UABESharp.AssetsBundleDirectoryInfo06) global::UABESharp.AssetsBundleDirectoryInfo06.NativeToManagedMap[((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->dirInf];
                else __result0 = global::UABESharp.AssetsBundleDirectoryInfo06.__CreateInstance(((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*) __Instance)->dirInf);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsBundleBlockAndDirectoryList06.__Internal*)__Instance)->dirInf = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class AssetsList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint pos;

            [FieldOffset(4)]
            internal uint count;

            [FieldOffset(8)]
            internal global::System.IntPtr ppEntries;

            [FieldOffset(12)]
            internal uint allocatedCount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsList@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Free@AssetsList@@QAEXXZ")]
            internal static extern void Free(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetsList@@QAE_NP6A_K_K0PAXJ@ZJAA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Read(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong* curFilePos, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsList@@QAE_NP6A_K_K0PBXJ@ZJAA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong* curFilePos, global::System.IntPtr errorLogger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetsList@@QAE_NP6A_K_K0PAXJ@ZJP6A_K00PBXJ@ZJ_NAA_KPA_KP6AXPAD@Z@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, global::System.IntPtr writer, int lPar, bool doWriteAssets, ulong* curReadPos, ulong* curWritePos, global::System.IntPtr errorLogger);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsList(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsList __CreateInstance(global::UABESharp.AssetsList.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsList(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsList.__Internal));
            *(global::UABESharp.AssetsList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsList(global::UABESharp.AssetsList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsList(global::UABESharp.AssetsList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsList.__Internal*) __Instance) = *((global::UABESharp.AssetsList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Free()
        {
            __Internal.Free((__Instance + __PointerAdjustment));
        }

        public bool Read(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ref ulong curFilePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            fixed (ulong* __refParamPtr2 = &curFilePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                var __ret = __Internal.Read((__Instance + __PointerAdjustment), __arg0, readerPar, __arg2, __arg3);
                return __ret;
            }
        }

        public bool Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ref ulong curFilePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            fixed (ulong* __refParamPtr2 = &curFilePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, __arg2, __arg3);
                return __ret;
            }
        }

        public bool Write(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, global::UABESharp.AssetsFileWriterDelegate writer, int lPar, bool doWriteAssets, ref ulong curReadPos, ref ulong curWritePos, global::UABESharp.AssetsFileVerifyLoggerDelegate errorLogger)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            fixed (ulong* __refParamPtr5 = &curReadPos)
            {
                var __arg5 = __refParamPtr5;
                fixed (ulong* __refParamPtr6 = &curWritePos)
                {
                    var __arg6 = __refParamPtr6;
                    var __arg7 = errorLogger == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(errorLogger);
                    var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, readerPar, __arg2, lPar, doWriteAssets, __arg5, __arg6, __arg7);
                    return __ret;
                }
            }
        }

        public uint Pos
        {
            get
            {
                return ((global::UABESharp.AssetsList.__Internal*) __Instance)->pos;
            }

            set
            {
                ((global::UABESharp.AssetsList.__Internal*)__Instance)->pos = value;
            }
        }

        public uint Count
        {
            get
            {
                return ((global::UABESharp.AssetsList.__Internal*) __Instance)->count;
            }

            set
            {
                ((global::UABESharp.AssetsList.__Internal*)__Instance)->count = value;
            }
        }

        public global::UABESharp.AssetsBundleEntry PpEntries
        {
            get
            {
                global::UABESharp.AssetsBundleEntry __result0;
                if (((global::UABESharp.AssetsList.__Internal*) __Instance)->ppEntries == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleEntry.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsList.__Internal*) __Instance)->ppEntries))
                    __result0 = (global::UABESharp.AssetsBundleEntry) global::UABESharp.AssetsBundleEntry.NativeToManagedMap[((global::UABESharp.AssetsList.__Internal*) __Instance)->ppEntries];
                else __result0 = global::UABESharp.AssetsBundleEntry.__CreateInstance(((global::UABESharp.AssetsList.__Internal*) __Instance)->ppEntries);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsList.__Internal*)__Instance)->ppEntries = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint AllocatedCount
        {
            get
            {
                return ((global::UABESharp.AssetsList.__Internal*) __Instance)->allocatedCount;
            }

            set
            {
                ((global::UABESharp.AssetsList.__Internal*)__Instance)->allocatedCount = value;
            }
        }
    }

    public unsafe partial class AssetsBundleFilePar : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pFile;

            [FieldOffset(4)]
            internal global::UABESharp.AssetsBundleFilePar._.__Internal _;

            [FieldOffset(8)]
            internal uint listIndex;

            [FieldOffset(12)]
            internal global::System.IntPtr origFileReader;

            [FieldOffset(16)]
            internal int origPar;

            [FieldOffset(24)]
            internal ulong curFilePos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsBundleFilePar@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr pEntry3;

                [FieldOffset(0)]
                internal global::System.IntPtr pEntry6;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleFilePar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsBundleFilePar>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsBundleFilePar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleFilePar(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsBundleFilePar __CreateInstance(global::UABESharp.AssetsBundleFilePar.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsBundleFilePar(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsBundleFilePar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFilePar.__Internal));
            *(global::UABESharp.AssetsBundleFilePar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsBundleFilePar(global::UABESharp.AssetsBundleFilePar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsBundleFilePar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsBundleFilePar()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFilePar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetsBundleFilePar(global::UABESharp.AssetsBundleFilePar _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsBundleFilePar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance) = *((global::UABESharp.AssetsBundleFilePar.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsBundleFilePar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::UABESharp.AssetsBundleFile PFile
        {
            get
            {
                global::UABESharp.AssetsBundleFile __result0;
                if (((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->pFile == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsBundleFile.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->pFile))
                    __result0 = (global::UABESharp.AssetsBundleFile) global::UABESharp.AssetsBundleFile.NativeToManagedMap[((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->pFile];
                else __result0 = global::UABESharp.AssetsBundleFile.__CreateInstance(((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->pFile);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsBundleFilePar.__Internal*)__Instance)->pFile = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint ListIndex
        {
            get
            {
                return ((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->listIndex;
            }

            set
            {
                ((global::UABESharp.AssetsBundleFilePar.__Internal*)__Instance)->listIndex = value;
            }
        }

        public global::UABESharp.AssetsFileReaderDelegate OrigFileReader
        {
            get
            {
                var __ptr0 = ((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->origFileReader;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }

            set
            {
                ((global::UABESharp.AssetsBundleFilePar.__Internal*)__Instance)->origFileReader = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public int OrigPar
        {
            get
            {
                return ((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->origPar;
            }

            set
            {
                ((global::UABESharp.AssetsBundleFilePar.__Internal*)__Instance)->origPar = value;
            }
        }

        public ulong CurFilePos
        {
            get
            {
                return ((global::UABESharp.AssetsBundleFilePar.__Internal*) __Instance)->curFilePos;
            }

            set
            {
                ((global::UABESharp.AssetsBundleFilePar.__Internal*)__Instance)->curFilePos = value;
            }
        }
    }

    public unsafe partial class AssetsBundleFileFormat
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AssetsBundle_AssetsFileReader@@YA_K_K0PAXJ@Z")]
            internal static extern ulong AssetsBundleAssetsFileReader(ulong pos, ulong count, byte[] pBuf, int par);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FreeAssetsBundle_FileReader@@YAXPAJPAP6A_K_K1PAXJ@Z@Z")]
            internal static extern void FreeAssetsBundleFileReader(int* pLPar, global::System.IntPtr pReader);
        }

        public static ulong AssetsBundleAssetsFileReader(ulong pos, ulong count, byte[] pBuf, int par)
        {
            var __ret = __Internal.AssetsBundleAssetsFileReader(pos, count, pBuf, par);
            return __ret;
        }

        public static void FreeAssetsBundleFileReader(ref int pLPar, global::UABESharp.AssetsFileReaderDelegate pReader)
        {
            fixed (int* __refParamPtr0 = &pLPar)
            {
                var __arg0 = __refParamPtr0;
                var __arg1 = pReader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(pReader);
                __Internal.FreeAssetsBundleFileReader(__arg0, __arg1);
            }
        }
    }

    public enum EnumValueTypes
    {
        ValueTypeNone = 0,
        ValueTypeBool = 1,
        ValueTypeInt8 = 2,
        ValueTypeUInt8 = 3,
        ValueTypeInt16 = 4,
        ValueTypeUInt16 = 5,
        ValueTypeInt32 = 6,
        ValueTypeUInt32 = 7,
        ValueTypeInt64 = 8,
        ValueTypeUInt64 = 9,
        ValueTypeFloat = 10,
        ValueTypeDouble = 11,
        ValueTypeString = 12,
        ValueTypeArray = 13,
        ValueTypeByteArray = 14
    }

    public unsafe partial class AssetTypeValueField : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr templateField;

            [FieldOffset(4)]
            internal uint childrenCount;

            [FieldOffset(8)]
            internal global::System.IntPtr pChildren;

            [FieldOffset(12)]
            internal global::System.IntPtr value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeValueField@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@AssetTypeValueField@@QAEXPAVAssetTypeValue@@PAVAssetTypeTemplateField@@KPAPAV1@@Z")]
            internal static extern void Read(global::System.IntPtr instance, global::System.IntPtr pValue, global::System.IntPtr pTemplate, uint childrenCount, global::System.IntPtr pChildren);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@AssetTypeValueField@@QAE_KP6A_K_K0PBXJ@ZJ0@Z")]
            internal static extern ulong Write(global::System.IntPtr instance, global::System.IntPtr writer, int writerPar, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Get@AssetTypeValueField@@QAEPAV1@PBD@Z")]
            internal static extern global::System.IntPtr Get(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Get@AssetTypeValueField@@QAEPAV1@I@Z")]
            internal static extern global::System.IntPtr Get_1(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetChildrenList@AssetTypeValueField@@QAEXPAPAV1@K@Z")]
            internal static extern void SetChildrenList(global::System.IntPtr instance, global::System.IntPtr pChildren, uint childrenCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetByteSize@AssetTypeValueField@@QAE_K_K@Z")]
            internal static extern ulong GetByteSize(global::System.IntPtr instance, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??AAssetTypeValueField@@QAEPAV0@PBD@Z")]
            internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??AAssetTypeValueField@@QAEPAV0@K@Z")]
            internal static extern global::System.IntPtr OperatorSubscript_1(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetChildrenList@AssetTypeValueField@@QAEPAPAV1@XZ")]
            internal static extern global::System.IntPtr GetChildrenList(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@AssetTypeValueField@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@AssetTypeValueField@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetValue@AssetTypeValueField@@QAEPAVAssetTypeValue@@XZ")]
            internal static extern global::System.IntPtr GetValue(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTemplateField@AssetTypeValueField@@QAEPAVAssetTypeTemplateField@@XZ")]
            internal static extern global::System.IntPtr GetTemplateField(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetChildrenCount@AssetTypeValueField@@QAEKXZ")]
            internal static extern uint GetChildrenCount(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsDummy@AssetTypeValueField@@QAE_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDummy(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeValueField> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeValueField>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeValueField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeValueField(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeValueField __CreateInstance(global::UABESharp.AssetTypeValueField.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeValueField(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeValueField.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValueField.__Internal));
            *(global::UABESharp.AssetTypeValueField.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeValueField(global::UABESharp.AssetTypeValueField.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeValueField(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeValueField()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValueField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetTypeValueField(global::UABESharp.AssetTypeValueField _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValueField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeValueField.__Internal*) __Instance) = *((global::UABESharp.AssetTypeValueField.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeValueField __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Read(global::UABESharp.AssetTypeValue pValue, global::UABESharp.AssetTypeTemplateField pTemplate, uint childrenCount, global::UABESharp.AssetTypeValueField pChildren)
        {
            var __arg0 = ReferenceEquals(pValue, null) ? global::System.IntPtr.Zero : pValue.__Instance;
            var __arg1 = ReferenceEquals(pTemplate, null) ? global::System.IntPtr.Zero : pTemplate.__Instance;
            var __arg3 = ReferenceEquals(pChildren, null) ? global::System.IntPtr.Zero : pChildren.__Instance;
            __Internal.Read((__Instance + __PointerAdjustment), __arg0, __arg1, childrenCount, __arg3);
        }

        public ulong Write(global::UABESharp.AssetsFileWriterDelegate writer, int writerPar, ulong filePos)
        {
            var __arg0 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.Write((__Instance + __PointerAdjustment), __arg0, writerPar, filePos);
            return __ret;
        }

        public global::UABESharp.AssetTypeValueField Get(string name)
        {
            var __ret = __Internal.Get((__Instance + __PointerAdjustment), name);
            global::UABESharp.AssetTypeValueField __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            return __result0;
        }

        public global::UABESharp.AssetTypeValueField Get(uint index)
        {
            var __ret = __Internal.Get_1((__Instance + __PointerAdjustment), index);
            global::UABESharp.AssetTypeValueField __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            return __result0;
        }

        public void SetChildrenList(global::UABESharp.AssetTypeValueField pChildren, uint childrenCount)
        {
            var __arg0 = ReferenceEquals(pChildren, null) ? global::System.IntPtr.Zero : pChildren.__Instance;
            __Internal.SetChildrenList((__Instance + __PointerAdjustment), __arg0, childrenCount);
        }

        public ulong GetByteSize(ulong filePos)
        {
            var __ret = __Internal.GetByteSize((__Instance + __PointerAdjustment), filePos);
            return __ret;
        }

        public global::UABESharp.AssetTypeValueField this[string name]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript((__Instance + __PointerAdjustment), name);
                return global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            }

            set
            {
                *(global::UABESharp.AssetTypeValueField.__Internal*) global::UABESharp.AssetTypeValueField.__Internal.OperatorSubscript((__Instance + __PointerAdjustment), name) = ReferenceEquals(value, null) ? new global::UABESharp.AssetTypeValueField.__Internal() : *(global::UABESharp.AssetTypeValueField.__Internal*) value.__Instance;
            }
        }

        public global::UABESharp.AssetTypeValueField this[uint index]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), index);
                return global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            }

            set
            {
                *(global::UABESharp.AssetTypeValueField.__Internal*) global::UABESharp.AssetTypeValueField.__Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), index) = ReferenceEquals(value, null) ? new global::UABESharp.AssetTypeValueField.__Internal() : *(global::UABESharp.AssetTypeValueField.__Internal*) value.__Instance;
            }
        }

        protected global::UABESharp.AssetTypeTemplateField templateField
        {
            get
            {
                global::UABESharp.AssetTypeTemplateField __result0;
                if (((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->templateField == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeTemplateField.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->templateField))
                    __result0 = (global::UABESharp.AssetTypeTemplateField) global::UABESharp.AssetTypeTemplateField.NativeToManagedMap[((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->templateField];
                else __result0 = global::UABESharp.AssetTypeTemplateField.__CreateInstance(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->templateField);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetTypeValueField.__Internal*)__Instance)->templateField = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint childrenCount
        {
            get
            {
                return ((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->childrenCount;
            }

            set
            {
                ((global::UABESharp.AssetTypeValueField.__Internal*)__Instance)->childrenCount = value;
            }
        }

        protected global::UABESharp.AssetTypeValueField PChildren
        {
            get
            {
                global::UABESharp.AssetTypeValueField __result0;
                if (((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->pChildren == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->pChildren))
                    __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->pChildren];
                else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->pChildren);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetTypeValueField.__Internal*)__Instance)->pChildren = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::UABESharp.AssetTypeValue value
        {
            get
            {
                global::UABESharp.AssetTypeValue __result0;
                if (((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->value == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeValue.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->value))
                    __result0 = (global::UABESharp.AssetTypeValue) global::UABESharp.AssetTypeValue.NativeToManagedMap[((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->value];
                else __result0 = global::UABESharp.AssetTypeValue.__CreateInstance(((global::UABESharp.AssetTypeValueField.__Internal*) __Instance)->value);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetTypeValueField.__Internal*)__Instance)->value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::UABESharp.AssetTypeValueField ChildrenList
        {
            get
            {
                var __ret = __Internal.GetChildrenList((__Instance + __PointerAdjustment));
                global::UABESharp.AssetTypeValueField __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
                return __result0;
            }
        }

        public string Name
        {
            get
            {
                var __ret = __Internal.GetName((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string Type
        {
            get
            {
                var __ret = __Internal.GetType((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public global::UABESharp.AssetTypeValue Value
        {
            get
            {
                var __ret = __Internal.GetValue((__Instance + __PointerAdjustment));
                global::UABESharp.AssetTypeValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetTypeValue) global::UABESharp.AssetTypeValue.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetTypeValue.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::UABESharp.AssetTypeTemplateField TemplateField
        {
            get
            {
                var __ret = __Internal.GetTemplateField((__Instance + __PointerAdjustment));
                global::UABESharp.AssetTypeTemplateField __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeTemplateField.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetTypeTemplateField) global::UABESharp.AssetTypeTemplateField.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetTypeTemplateField.__CreateInstance(__ret);
                return __result0;
            }
        }

        public uint ChildrenCount
        {
            get
            {
                var __ret = __Internal.GetChildrenCount((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsDummy
        {
            get
            {
                var __ret = __Internal.IsDummy((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetTypeTemplateField : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(4)]
            internal global::System.IntPtr type;

            [FieldOffset(8)]
            internal global::UABESharp.EnumValueTypes valueType;

            [FieldOffset(12)]
            internal byte isArray;

            [FieldOffset(13)]
            internal byte align;

            [FieldOffset(14)]
            internal byte hasValue;

            [FieldOffset(16)]
            internal uint childrenCount;

            [FieldOffset(20)]
            internal global::System.IntPtr children;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeTemplateField@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeTemplateField@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetTypeTemplateField@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@AssetTypeTemplateField@@QAEXXZ")]
            internal static extern void Clear(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?From0D@AssetTypeTemplateField@@QAE_NPAUType_0D@@K@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool From0D(global::System.IntPtr instance, global::System.IntPtr pU5Type, uint fieldIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FromClassDatabase@AssetTypeTemplateField@@QAE_NPAVClassDatabaseFile@@PAVClassDatabaseType@@K@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FromClassDatabase(global::System.IntPtr instance, global::System.IntPtr pFile, global::System.IntPtr pType, uint fieldIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?From07@AssetTypeTemplateField@@QAE_NPAUTypeField_07@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool From07(global::System.IntPtr instance, global::System.IntPtr pTypeField);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MakeValue@AssetTypeTemplateField@@QAE_KP6A_K_K0PAXJ@ZJ0PAPAVAssetTypeValueField@@_N@Z")]
            internal static extern ulong MakeValue(global::System.IntPtr instance, global::System.IntPtr reader, int readerPar, ulong filePos, global::System.IntPtr ppValueField, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SearchChild@AssetTypeTemplateField@@QAEPAV1@PBD@Z")]
            internal static extern global::System.IntPtr SearchChild(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeTemplateField> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeTemplateField>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeTemplateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeTemplateField(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeTemplateField __CreateInstance(global::UABESharp.AssetTypeTemplateField.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeTemplateField(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeTemplateField.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeTemplateField.__Internal));
            *(global::UABESharp.AssetTypeTemplateField.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeTemplateField(global::UABESharp.AssetTypeTemplateField.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeTemplateField(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeTemplateField()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeTemplateField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public AssetTypeTemplateField(global::UABESharp.AssetTypeTemplateField _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeTemplateField.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance) = *((global::UABESharp.AssetTypeTemplateField.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeTemplateField __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Clear()
        {
            __Internal.Clear((__Instance + __PointerAdjustment));
        }

        public bool From0D(global::UABESharp.Type0D pU5Type, uint fieldIndex)
        {
            var __arg0 = ReferenceEquals(pU5Type, null) ? global::System.IntPtr.Zero : pU5Type.__Instance;
            var __ret = __Internal.From0D((__Instance + __PointerAdjustment), __arg0, fieldIndex);
            return __ret;
        }

        public bool FromClassDatabase(global::UABESharp.ClassDatabaseFile pFile, global::UABESharp.ClassDatabaseType pType, uint fieldIndex)
        {
            var __arg0 = ReferenceEquals(pFile, null) ? global::System.IntPtr.Zero : pFile.__Instance;
            var __arg1 = ReferenceEquals(pType, null) ? global::System.IntPtr.Zero : pType.__Instance;
            var __ret = __Internal.FromClassDatabase((__Instance + __PointerAdjustment), __arg0, __arg1, fieldIndex);
            return __ret;
        }

        public bool From07(global::UABESharp.TypeField07 pTypeField)
        {
            var __arg0 = ReferenceEquals(pTypeField, null) ? global::System.IntPtr.Zero : pTypeField.__Instance;
            var __ret = __Internal.From07((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public ulong MakeValue(global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, ulong filePos, global::UABESharp.AssetTypeValueField ppValueField, bool bigEndian)
        {
            var __arg0 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var __arg3 = ReferenceEquals(ppValueField, null) ? global::System.IntPtr.Zero : ppValueField.__Instance;
            var __ret = __Internal.MakeValue((__Instance + __PointerAdjustment), __arg0, readerPar, filePos, __arg3, bigEndian);
            return __ret;
        }

        public global::UABESharp.AssetTypeTemplateField SearchChild(string name)
        {
            var __ret = __Internal.SearchChild((__Instance + __PointerAdjustment), name);
            global::UABESharp.AssetTypeTemplateField __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetTypeTemplateField.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetTypeTemplateField) global::UABESharp.AssetTypeTemplateField.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetTypeTemplateField.__CreateInstance(__ret);
            return __result0;
        }

        public string Name
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->name);
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->name = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public string Type
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->type);
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->type = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public global::UABESharp.EnumValueTypes ValueType
        {
            get
            {
                return ((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->valueType;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->valueType = value;
            }
        }

        public bool IsArray
        {
            get
            {
                return ((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->isArray != 0;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->isArray = (byte) (value ? 1 : 0);
            }
        }

        public bool Align
        {
            get
            {
                return ((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->align != 0;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->align = (byte) (value ? 1 : 0);
            }
        }

        public bool HasValue
        {
            get
            {
                return ((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->hasValue != 0;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->hasValue = (byte) (value ? 1 : 0);
            }
        }

        public uint ChildrenCount
        {
            get
            {
                return ((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->childrenCount;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->childrenCount = value;
            }
        }

        public global::UABESharp.AssetTypeTemplateField Children
        {
            get
            {
                global::UABESharp.AssetTypeTemplateField __result0;
                if (((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->children == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeTemplateField.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->children))
                    __result0 = (global::UABESharp.AssetTypeTemplateField) global::UABESharp.AssetTypeTemplateField.NativeToManagedMap[((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->children];
                else __result0 = global::UABESharp.AssetTypeTemplateField.__CreateInstance(((global::UABESharp.AssetTypeTemplateField.__Internal*) __Instance)->children);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetTypeTemplateField.__Internal*)__Instance)->children = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class AssetTypeValue : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.EnumValueTypes type;

            [FieldOffset(8)]
            internal global::UABESharp.AssetTypeValue.ValueTypes.__Internal value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeValue@@QAE@W4EnumValueTypes@@PAX@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::UABESharp.EnumValueTypes type, global::System.IntPtr valueContainer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeValue@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetTypeValue@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Set@AssetTypeValue@@QAEXPAX@Z")]
            internal static extern void Set(global::System.IntPtr instance, global::System.IntPtr valueContainer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@AssetTypeValue@@QAE?AW4EnumValueTypes@@XZ")]
            internal static extern global::UABESharp.EnumValueTypes GetType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsArray@AssetTypeValue@@QAEPAUAssetTypeArray@@XZ")]
            internal static extern global::System.IntPtr AsArray(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsByteArray@AssetTypeValue@@QAEPAUAssetTypeByteArray@@XZ")]
            internal static extern global::System.IntPtr AsByteArray(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsString@AssetTypeValue@@QAEPADXZ")]
            internal static extern sbyte* AsString(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsBool@AssetTypeValue@@QAE_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AsBool(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsInt@AssetTypeValue@@QAEHXZ")]
            internal static extern int AsInt(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsUInt@AssetTypeValue@@QAEIXZ")]
            internal static extern uint AsUInt(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsInt64@AssetTypeValue@@QAE_JXZ")]
            internal static extern long AsInt64(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsUInt64@AssetTypeValue@@QAE_KXZ")]
            internal static extern ulong AsUInt64(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsFloat@AssetTypeValue@@QAEMXZ")]
            internal static extern float AsFloat(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AsDouble@AssetTypeValue@@QAENXZ")]
            internal static extern double AsDouble(global::System.IntPtr instance);
        }

        public unsafe partial struct ValueTypes
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::UABESharp.AssetTypeArray.__Internal asArray;

                [FieldOffset(0)]
                internal global::UABESharp.AssetTypeByteArray.__Internal asByteArray;

                [FieldOffset(0)]
                internal byte asBool;

                [FieldOffset(0)]
                internal sbyte asInt8;

                [FieldOffset(0)]
                internal byte asUInt8;

                [FieldOffset(0)]
                internal short asInt16;

                [FieldOffset(0)]
                internal ushort asUInt16;

                [FieldOffset(0)]
                internal int asInt32;

                [FieldOffset(0)]
                internal uint asUInt32;

                [FieldOffset(0)]
                internal long asInt64;

                [FieldOffset(0)]
                internal ulong asUInt64;

                [FieldOffset(0)]
                internal float asFloat;

                [FieldOffset(0)]
                internal double asDouble;

                [FieldOffset(0)]
                internal global::System.IntPtr asString;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeValue> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeValue>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeValue(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeValue __CreateInstance(global::UABESharp.AssetTypeValue.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeValue(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeValue.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValue.__Internal));
            *(global::UABESharp.AssetTypeValue.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeValue(global::UABESharp.AssetTypeValue.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeValue(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeValue(global::UABESharp.EnumValueTypes type, global::System.IntPtr valueContainer)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment), type, valueContainer);
        }

        public AssetTypeValue(global::UABESharp.AssetTypeValue _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeValue.__Internal*) __Instance) = *((global::UABESharp.AssetTypeValue.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeValue __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Set(global::System.IntPtr valueContainer)
        {
            __Internal.Set((__Instance + __PointerAdjustment), valueContainer);
        }

        public global::UABESharp.EnumValueTypes Type
        {
            get
            {
                var __ret = __Internal.GetType((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::UABESharp.AssetTypeArray AsArray
        {
            get
            {
                var __ret = __Internal.AsArray((__Instance + __PointerAdjustment));
                global::UABESharp.AssetTypeArray __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeArray.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetTypeArray) global::UABESharp.AssetTypeArray.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetTypeArray.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::UABESharp.AssetTypeByteArray AsByteArray
        {
            get
            {
                var __ret = __Internal.AsByteArray((__Instance + __PointerAdjustment));
                global::UABESharp.AssetTypeByteArray __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetTypeByteArray.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetTypeByteArray) global::UABESharp.AssetTypeByteArray.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetTypeByteArray.__CreateInstance(__ret);
                return __result0;
            }
        }

        public sbyte* AsString
        {
            get
            {
                var __ret = __Internal.AsString((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool AsBool
        {
            get
            {
                var __ret = __Internal.AsBool((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public int AsInt
        {
            get
            {
                var __ret = __Internal.AsInt((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint AsUInt
        {
            get
            {
                var __ret = __Internal.AsUInt((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public long AsInt64
        {
            get
            {
                var __ret = __Internal.AsInt64((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong AsUInt64
        {
            get
            {
                var __ret = __Internal.AsUInt64((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float AsFloat
        {
            get
            {
                var __ret = __Internal.AsFloat((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double AsDouble
        {
            get
            {
                var __ret = __Internal.AsDouble((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetTypeArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint size;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeArray@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeArray(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeArray __CreateInstance(global::UABESharp.AssetTypeArray.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeArray(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeArray.__Internal));
            *(global::UABESharp.AssetTypeArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeArray(global::UABESharp.AssetTypeArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeArray(global::UABESharp.AssetTypeArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeArray.__Internal*) __Instance) = *((global::UABESharp.AssetTypeArray.__Internal*) _0.__Instance);
        }

        public AssetTypeArray()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Size
        {
            get
            {
                return ((global::UABESharp.AssetTypeArray.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::UABESharp.AssetTypeArray.__Internal*)__Instance)->size = value;
            }
        }
    }

    public unsafe partial class AssetTypeByteArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint size;

            [FieldOffset(4)]
            internal global::System.IntPtr data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeByteArray@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeByteArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeByteArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeByteArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeByteArray(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeByteArray __CreateInstance(global::UABESharp.AssetTypeByteArray.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeByteArray(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeByteArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeByteArray.__Internal));
            *(global::UABESharp.AssetTypeByteArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeByteArray(global::UABESharp.AssetTypeByteArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeByteArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeByteArray(global::UABESharp.AssetTypeByteArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeByteArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeByteArray.__Internal*) __Instance) = *((global::UABESharp.AssetTypeByteArray.__Internal*) _0.__Instance);
        }

        public AssetTypeByteArray()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeByteArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeByteArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Size
        {
            get
            {
                return ((global::UABESharp.AssetTypeByteArray.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::UABESharp.AssetTypeByteArray.__Internal*)__Instance)->size = value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::UABESharp.AssetTypeByteArray.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::UABESharp.AssetTypeByteArray.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class AssetTypeInstance : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint baseFieldCount;

            [FieldOffset(4)]
            internal global::System.IntPtr baseFields;

            [FieldOffset(8)]
            internal uint allocationCount;

            [FieldOffset(12)]
            internal uint allocationBufLen;

            [FieldOffset(16)]
            internal global::System.IntPtr memoryToClear;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeInstance@@QAE@KPAPAVAssetTypeTemplateField@@P6A_K_K1PAXJ@ZJ_N1@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint baseFieldCount, global::System.IntPtr ppBaseFields, global::System.IntPtr reader, int readerPar, bool bigEndian, ulong filePos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetTypeInstance@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetTypeInstance@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetChildList@AssetTypeInstance@@QAE_NPAVAssetTypeValueField@@PAPAV2@K_N@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetChildList(global::System.IntPtr instance, global::System.IntPtr pValueField, global::System.IntPtr pChildrenList, uint childrenCount, bool freeMemory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AddTempMemory@AssetTypeInstance@@QAE_NPAX@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AddTempMemory(global::System.IntPtr instance, global::System.IntPtr pMemory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBaseField@AssetTypeInstance@@QAEPAVAssetTypeValueField@@K@Z")]
            internal static extern global::System.IntPtr GetBaseField(global::System.IntPtr instance, uint index);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeInstance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetTypeInstance>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetTypeInstance __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeInstance(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetTypeInstance __CreateInstance(global::UABESharp.AssetTypeInstance.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetTypeInstance(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetTypeInstance.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeInstance.__Internal));
            *(global::UABESharp.AssetTypeInstance.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetTypeInstance(global::UABESharp.AssetTypeInstance.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetTypeInstance(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetTypeInstance(uint baseFieldCount, global::UABESharp.AssetTypeTemplateField ppBaseFields, global::UABESharp.AssetsFileReaderDelegate reader, int readerPar, bool bigEndian, ulong filePos)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg1 = ReferenceEquals(ppBaseFields, null) ? global::System.IntPtr.Zero : ppBaseFields.__Instance;
            var __arg2 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            __Internal.ctor((__Instance + __PointerAdjustment), baseFieldCount, __arg1, __arg2, readerPar, bigEndian, filePos);
        }

        public AssetTypeInstance(global::UABESharp.AssetTypeInstance _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetTypeInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetTypeInstance.__Internal*) __Instance) = *((global::UABESharp.AssetTypeInstance.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetTypeInstance __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool SetChildList(global::UABESharp.AssetTypeValueField pValueField, global::UABESharp.AssetTypeValueField pChildrenList, uint childrenCount, bool freeMemory)
        {
            var __arg0 = ReferenceEquals(pValueField, null) ? global::System.IntPtr.Zero : pValueField.__Instance;
            var __arg1 = ReferenceEquals(pChildrenList, null) ? global::System.IntPtr.Zero : pChildrenList.__Instance;
            var __ret = __Internal.SetChildList((__Instance + __PointerAdjustment), __arg0, __arg1, childrenCount, freeMemory);
            return __ret;
        }

        public bool AddTempMemory(global::System.IntPtr pMemory)
        {
            var __ret = __Internal.AddTempMemory((__Instance + __PointerAdjustment), pMemory);
            return __ret;
        }

        public global::UABESharp.AssetTypeValueField GetBaseField(uint index)
        {
            var __ret = __Internal.GetBaseField((__Instance + __PointerAdjustment), index);
            global::UABESharp.AssetTypeValueField __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class AssetTypeClass
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ClearAssetTypeValueField@@YAXPAVAssetTypeValueField@@@Z")]
            internal static extern void ClearAssetTypeValueField(global::System.IntPtr pValueField);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValueTypeByTypeName@@YA?AW4EnumValueTypes@@PBD@Z")]
            internal static extern global::UABESharp.EnumValueTypes GetValueTypeByTypeName([MarshalAs(UnmanagedType.LPStr)] string type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDummyAssetTypeField@@YAPAVAssetTypeValueField@@XZ")]
            internal static extern global::System.IntPtr GetDummyAssetTypeField();
        }

        public static void ClearAssetTypeValueField(global::UABESharp.AssetTypeValueField pValueField)
        {
            var __arg0 = ReferenceEquals(pValueField, null) ? global::System.IntPtr.Zero : pValueField.__Instance;
            __Internal.ClearAssetTypeValueField(__arg0);
        }

        public static global::UABESharp.EnumValueTypes GetValueTypeByTypeName(string type)
        {
            var __ret = __Internal.GetValueTypeByTypeName(type);
            return __ret;
        }

        public static global::UABESharp.AssetTypeValueField GetDummyAssetTypeField()
        {
            var __ret = __Internal.GetDummyAssetTypeField();
            global::UABESharp.AssetTypeValueField __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetTypeValueField.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetTypeValueField) global::UABESharp.AssetTypeValueField.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetTypeValueField.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class PreloadData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int fileId;

            [FieldOffset(8)]
            internal long pathId;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0PreloadData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PreloadData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.PreloadData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.PreloadData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.PreloadData(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.PreloadData __CreateInstance(global::UABESharp.PreloadData.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.PreloadData(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.PreloadData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadData.__Internal));
            *(global::UABESharp.PreloadData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PreloadData(global::UABESharp.PreloadData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PreloadData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PreloadData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PreloadData(global::UABESharp.PreloadData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.PreloadData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.PreloadData.__Internal*) __Instance) = *((global::UABESharp.PreloadData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.PreloadData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FileId
        {
            get
            {
                return ((global::UABESharp.PreloadData.__Internal*) __Instance)->fileId;
            }

            set
            {
                ((global::UABESharp.PreloadData.__Internal*)__Instance)->fileId = value;
            }
        }

        public long PathId
        {
            get
            {
                return ((global::UABESharp.PreloadData.__Internal*) __Instance)->pathId;
            }

            set
            {
                ((global::UABESharp.PreloadData.__Internal*)__Instance)->pathId = value;
            }
        }
    }

    public unsafe partial class ContainerData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(4)]
            internal int preloadIndex;

            [FieldOffset(8)]
            internal int preloadSize;

            [FieldOffset(16)]
            internal global::UABESharp.PreloadData.__Internal ids;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ContainerData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ContainerData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ContainerData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ContainerData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ContainerData(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ContainerData __CreateInstance(global::UABESharp.ContainerData.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ContainerData(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ContainerData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ContainerData.__Internal));
            *(global::UABESharp.ContainerData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ContainerData(global::UABESharp.ContainerData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ContainerData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ContainerData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ContainerData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ContainerData(global::UABESharp.ContainerData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ContainerData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ContainerData.__Internal*) __Instance) = *((global::UABESharp.ContainerData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ContainerData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ContainerData.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::UABESharp.ContainerData.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }

        public int PreloadIndex
        {
            get
            {
                return ((global::UABESharp.ContainerData.__Internal*) __Instance)->preloadIndex;
            }

            set
            {
                ((global::UABESharp.ContainerData.__Internal*)__Instance)->preloadIndex = value;
            }
        }

        public int PreloadSize
        {
            get
            {
                return ((global::UABESharp.ContainerData.__Internal*) __Instance)->preloadSize;
            }

            set
            {
                ((global::UABESharp.ContainerData.__Internal*)__Instance)->preloadSize = value;
            }
        }

        public global::UABESharp.PreloadData Ids
        {
            get
            {
                return global::UABESharp.PreloadData.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ContainerData.__Internal*) __Instance)->ids));
            }

            set
            {
                ((global::UABESharp.ContainerData.__Internal*)__Instance)->ids = ReferenceEquals(value, null) ? new global::UABESharp.PreloadData.__Internal() : *(global::UABESharp.PreloadData.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ScriptCompatibilityData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr className;

            [FieldOffset(4)]
            internal global::System.IntPtr namespaceName;

            [FieldOffset(8)]
            internal global::System.IntPtr assemblyName;

            [FieldOffset(12)]
            internal uint hash;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ScriptCompatibilityData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ScriptCompatibilityData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ScriptCompatibilityData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ScriptCompatibilityData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ScriptCompatibilityData(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ScriptCompatibilityData __CreateInstance(global::UABESharp.ScriptCompatibilityData.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ScriptCompatibilityData(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ScriptCompatibilityData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ScriptCompatibilityData.__Internal));
            *(global::UABESharp.ScriptCompatibilityData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScriptCompatibilityData(global::UABESharp.ScriptCompatibilityData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScriptCompatibilityData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ScriptCompatibilityData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ScriptCompatibilityData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ScriptCompatibilityData(global::UABESharp.ScriptCompatibilityData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ScriptCompatibilityData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ScriptCompatibilityData.__Internal*) __Instance) = *((global::UABESharp.ScriptCompatibilityData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ScriptCompatibilityData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* ClassName
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ScriptCompatibilityData.__Internal*) __Instance)->className;
            }

            set
            {
                ((global::UABESharp.ScriptCompatibilityData.__Internal*)__Instance)->className = (global::System.IntPtr) value;
            }
        }

        public sbyte* NamespaceName
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ScriptCompatibilityData.__Internal*) __Instance)->namespaceName;
            }

            set
            {
                ((global::UABESharp.ScriptCompatibilityData.__Internal*)__Instance)->namespaceName = (global::System.IntPtr) value;
            }
        }

        public sbyte* AssemblyName
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ScriptCompatibilityData.__Internal*) __Instance)->assemblyName;
            }

            set
            {
                ((global::UABESharp.ScriptCompatibilityData.__Internal*)__Instance)->assemblyName = (global::System.IntPtr) value;
            }
        }

        public uint Hash
        {
            get
            {
                return ((global::UABESharp.ScriptCompatibilityData.__Internal*) __Instance)->hash;
            }

            set
            {
                ((global::UABESharp.ScriptCompatibilityData.__Internal*)__Instance)->hash = value;
            }
        }
    }

    public unsafe partial class ClassCompatibilityData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(4)]
            internal uint second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ClassCompatibilityData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassCompatibilityData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ClassCompatibilityData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ClassCompatibilityData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassCompatibilityData(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ClassCompatibilityData __CreateInstance(global::UABESharp.ClassCompatibilityData.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ClassCompatibilityData(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ClassCompatibilityData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassCompatibilityData.__Internal));
            *(global::UABESharp.ClassCompatibilityData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClassCompatibilityData(global::UABESharp.ClassCompatibilityData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClassCompatibilityData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ClassCompatibilityData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassCompatibilityData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ClassCompatibilityData(global::UABESharp.ClassCompatibilityData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ClassCompatibilityData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ClassCompatibilityData.__Internal*) __Instance) = *((global::UABESharp.ClassCompatibilityData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ClassCompatibilityData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int First
        {
            get
            {
                return ((global::UABESharp.ClassCompatibilityData.__Internal*) __Instance)->first;
            }

            set
            {
                ((global::UABESharp.ClassCompatibilityData.__Internal*)__Instance)->first = value;
            }
        }

        public uint Second
        {
            get
            {
                return ((global::UABESharp.ClassCompatibilityData.__Internal*) __Instance)->second;
            }

            set
            {
                ((global::UABESharp.ClassCompatibilityData.__Internal*)__Instance)->second = value;
            }
        }
    }

    public unsafe partial class AssetBundleAsset : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 104)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte isModified;

            [FieldOffset(1)]
            internal byte isRead;

            [FieldOffset(4)]
            internal int unityVersion;

            [FieldOffset(8)]
            internal global::System.IntPtr pAssetType;

            [FieldOffset(12)]
            internal global::System.IntPtr name;

            [FieldOffset(16)]
            internal uint preloadArrayLen;

            [FieldOffset(20)]
            internal global::System.IntPtr preloadArray;

            [FieldOffset(24)]
            internal uint containerArrayLen;

            [FieldOffset(28)]
            internal global::System.IntPtr containerArray;

            [FieldOffset(32)]
            internal global::UABESharp.ContainerData.__Internal mainAsset;

            [FieldOffset(64)]
            internal int scriptCompatibilityArrayLen;

            [FieldOffset(68)]
            internal global::System.IntPtr scriptCompatibilityArray;

            [FieldOffset(72)]
            internal int classCompatibilityArrayLen;

            [FieldOffset(76)]
            internal global::System.IntPtr classCompatibilityArray;

            [FieldOffset(80)]
            internal uint runtimeCompatibility;

            [FieldOffset(84)]
            internal global::System.IntPtr assetBundleName;

            [FieldOffset(88)]
            internal int dependenciesArrayLen;

            [FieldOffset(92)]
            internal global::System.IntPtr dependencies;

            [FieldOffset(96)]
            internal byte isStreamedSceneAssetBundle;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetBundleAsset@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetBundleAsset@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetBundleAsset@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ReadBundleFile@AssetBundleAsset@@QAE_NPAXHPAHPAVAssetTypeTemplateField@@_N@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadBundleFile(global::System.IntPtr instance, global::System.IntPtr data, int dataLen, int* filePos, global::System.IntPtr pBaseField, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ReadBundleFile@AssetBundleAsset@@QAEXPAXHPAHH_N@Z")]
            internal static extern void ReadBundleFile(global::System.IntPtr instance, global::System.IntPtr data, int dataLen, int* filePos, int assetsVersion, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FlushChanges@AssetBundleAsset@@QAEXXZ")]
            internal static extern void FlushChanges(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?WriteBundleFile@AssetBundleAsset@@QAE_NPAXHPAH@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteBundleFile(global::System.IntPtr instance, byte[] buffer, int bufferLen, int* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetModified@AssetBundleAsset@@QAEXXZ")]
            internal static extern void SetModified(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AddContainer@AssetBundleAsset@@QAEHPAUContainerData@@@Z")]
            internal static extern int AddContainer(global::System.IntPtr instance, global::System.IntPtr cd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?UpdatePreloadArray@AssetBundleAsset@@QAEXK@Z")]
            internal static extern void UpdatePreloadArray(global::System.IntPtr instance, uint containerIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RemoveContainer@AssetBundleAsset@@QAEXK@Z")]
            internal static extern void RemoveContainer(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileSize@AssetBundleAsset@@QAEHXZ")]
            internal static extern int GetFileSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsModified@AssetBundleAsset@@QAE_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsModified(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetBundleAsset> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetBundleAsset>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetBundleAsset __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetBundleAsset(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetBundleAsset __CreateInstance(global::UABESharp.AssetBundleAsset.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetBundleAsset(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetBundleAsset.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetBundleAsset.__Internal));
            *(global::UABESharp.AssetBundleAsset.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetBundleAsset(global::UABESharp.AssetBundleAsset.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetBundleAsset(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetBundleAsset()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetBundleAsset.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public AssetBundleAsset(global::UABESharp.AssetBundleAsset _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetBundleAsset.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetBundleAsset.__Internal*) __Instance) = *((global::UABESharp.AssetBundleAsset.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetBundleAsset __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool ReadBundleFile(global::System.IntPtr data, int dataLen, ref int filePos, global::UABESharp.AssetTypeTemplateField pBaseField, bool bigEndian)
        {
            fixed (int* __refParamPtr2 = &filePos)
            {
                var __arg2 = __refParamPtr2;
                var __arg3 = ReferenceEquals(pBaseField, null) ? global::System.IntPtr.Zero : pBaseField.__Instance;
                var __ret = __Internal.ReadBundleFile((__Instance + __PointerAdjustment), data, dataLen, __arg2, __arg3, bigEndian);
                return __ret;
            }
        }

        public void ReadBundleFile(global::System.IntPtr data, int dataLen, ref int filePos, int assetsVersion, bool bigEndian)
        {
            fixed (int* __refParamPtr2 = &filePos)
            {
                var __arg2 = __refParamPtr2;
                __Internal.ReadBundleFile((__Instance + __PointerAdjustment), data, dataLen, __arg2, assetsVersion, bigEndian);
            }
        }

        public void FlushChanges()
        {
            __Internal.FlushChanges((__Instance + __PointerAdjustment));
        }

        public bool WriteBundleFile(byte[] buffer, int bufferLen, ref int size)
        {
            fixed (int* __refParamPtr2 = &size)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.WriteBundleFile((__Instance + __PointerAdjustment), buffer, bufferLen, __arg2);
                return __ret;
            }
        }

        public void SetModified()
        {
            __Internal.SetModified((__Instance + __PointerAdjustment));
        }

        public int AddContainer(global::UABESharp.ContainerData cd)
        {
            var __arg0 = ReferenceEquals(cd, null) ? global::System.IntPtr.Zero : cd.__Instance;
            var __ret = __Internal.AddContainer((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public void UpdatePreloadArray(uint containerIndex)
        {
            __Internal.UpdatePreloadArray((__Instance + __PointerAdjustment), containerIndex);
        }

        public void RemoveContainer(uint index)
        {
            __Internal.RemoveContainer((__Instance + __PointerAdjustment), index);
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }

        public uint PreloadArrayLen
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->preloadArrayLen;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->preloadArrayLen = value;
            }
        }

        public global::UABESharp.PreloadData PreloadArray
        {
            get
            {
                global::UABESharp.PreloadData __result0;
                if (((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->preloadArray == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.PreloadData.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->preloadArray))
                    __result0 = (global::UABESharp.PreloadData) global::UABESharp.PreloadData.NativeToManagedMap[((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->preloadArray];
                else __result0 = global::UABESharp.PreloadData.__CreateInstance(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->preloadArray);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->preloadArray = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint ContainerArrayLen
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->containerArrayLen;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->containerArrayLen = value;
            }
        }

        public global::UABESharp.ContainerData ContainerArray
        {
            get
            {
                global::UABESharp.ContainerData __result0;
                if (((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->containerArray == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ContainerData.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->containerArray))
                    __result0 = (global::UABESharp.ContainerData) global::UABESharp.ContainerData.NativeToManagedMap[((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->containerArray];
                else __result0 = global::UABESharp.ContainerData.__CreateInstance(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->containerArray);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->containerArray = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::UABESharp.ContainerData MainAsset
        {
            get
            {
                return global::UABESharp.ContainerData.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->mainAsset));
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->mainAsset = ReferenceEquals(value, null) ? new global::UABESharp.ContainerData.__Internal() : *(global::UABESharp.ContainerData.__Internal*) value.__Instance;
            }
        }

        public int ScriptCompatibilityArrayLen
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->scriptCompatibilityArrayLen;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->scriptCompatibilityArrayLen = value;
            }
        }

        public global::UABESharp.ScriptCompatibilityData ScriptCompatibilityArray
        {
            get
            {
                global::UABESharp.ScriptCompatibilityData __result0;
                if (((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->scriptCompatibilityArray == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ScriptCompatibilityData.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->scriptCompatibilityArray))
                    __result0 = (global::UABESharp.ScriptCompatibilityData) global::UABESharp.ScriptCompatibilityData.NativeToManagedMap[((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->scriptCompatibilityArray];
                else __result0 = global::UABESharp.ScriptCompatibilityData.__CreateInstance(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->scriptCompatibilityArray);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->scriptCompatibilityArray = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int ClassCompatibilityArrayLen
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->classCompatibilityArrayLen;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->classCompatibilityArrayLen = value;
            }
        }

        public global::UABESharp.ClassCompatibilityData ClassCompatibilityArray
        {
            get
            {
                global::UABESharp.ClassCompatibilityData __result0;
                if (((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->classCompatibilityArray == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ClassCompatibilityData.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->classCompatibilityArray))
                    __result0 = (global::UABESharp.ClassCompatibilityData) global::UABESharp.ClassCompatibilityData.NativeToManagedMap[((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->classCompatibilityArray];
                else __result0 = global::UABESharp.ClassCompatibilityData.__CreateInstance(((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->classCompatibilityArray);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->classCompatibilityArray = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint RuntimeCompatibility
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->runtimeCompatibility;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->runtimeCompatibility = value;
            }
        }

        public sbyte* AssetBundleName
        {
            get
            {
                return (sbyte*) ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->assetBundleName;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->assetBundleName = (global::System.IntPtr) value;
            }
        }

        public int DependenciesArrayLen
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->dependenciesArrayLen;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->dependenciesArrayLen = value;
            }
        }

        public sbyte** Dependencies
        {
            get
            {
                return (sbyte**) ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->dependencies;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->dependencies = (global::System.IntPtr) value;
            }
        }

        public bool IsStreamedSceneAssetBundle
        {
            get
            {
                return ((global::UABESharp.AssetBundleAsset.__Internal*) __Instance)->isStreamedSceneAssetBundle != 0;
            }

            set
            {
                ((global::UABESharp.AssetBundleAsset.__Internal*)__Instance)->isStreamedSceneAssetBundle = (byte) (value ? 1 : 0);
            }
        }

        public int FileSize
        {
            get
            {
                var __ret = __Internal.GetFileSize((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsModified
        {
            get
            {
                var __ret = __Internal.IsModified((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class AssetFileInfoEx : global::UABESharp.AssetFileInfo, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 152)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong index;

            [FieldOffset(8)]
            internal uint offs_curFile;

            [FieldOffset(12)]
            internal uint curFileSize;

            [FieldOffset(16)]
            internal uint curFileTypeOrIndex;

            [FieldOffset(20)]
            internal ushort inheritedUnityClass;

            [FieldOffset(22)]
            internal ushort scriptIndex;

            [FieldOffset(24)]
            internal byte unknown1;

            [FieldOffset(32)]
            internal uint curFileType;

            [FieldOffset(40)]
            internal ulong absolutePos;

            [FieldOffset(48)]
            internal fixed sbyte name[100];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetFileInfoEx@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        internal static new global::UABESharp.AssetFileInfoEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileInfoEx(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetFileInfoEx __CreateInstance(global::UABESharp.AssetFileInfoEx.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetFileInfoEx(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetFileInfoEx.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfoEx.__Internal));
            *(global::UABESharp.AssetFileInfoEx.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetFileInfoEx(global::UABESharp.AssetFileInfoEx.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetFileInfoEx(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetFileInfoEx()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfoEx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AssetFileInfoEx(global::UABESharp.AssetFileInfoEx _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetFileInfoEx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetFileInfoEx.__Internal*) __Instance) = *((global::UABESharp.AssetFileInfoEx.__Internal*) _0.__Instance);
        }

        public uint CurFileType
        {
            get
            {
                return ((global::UABESharp.AssetFileInfoEx.__Internal*) __Instance)->curFileType;
            }

            set
            {
                ((global::UABESharp.AssetFileInfoEx.__Internal*)__Instance)->curFileType = value;
            }
        }

        public ulong AbsolutePos
        {
            get
            {
                return ((global::UABESharp.AssetFileInfoEx.__Internal*) __Instance)->absolutePos;
            }

            set
            {
                ((global::UABESharp.AssetFileInfoEx.__Internal*)__Instance)->absolutePos = value;
            }
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::UABESharp.AssetFileInfoEx.__Internal*) __Instance)->name != null)
                {
                    __value = new sbyte[100];
                    for (int i = 0; i < 100; i++)
                        __value[i] = ((global::UABESharp.AssetFileInfoEx.__Internal*) __Instance)->name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 100; i++)
                        ((global::UABESharp.AssetFileInfoEx.__Internal*)__Instance)->name[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class AssetsFileTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pFile;

            [FieldOffset(4)]
            internal global::System.IntPtr reader;

            [FieldOffset(8)]
            internal int readerPar;

            [FieldOffset(12)]
            internal global::System.IntPtr pAssetFileInfo;

            [FieldOffset(16)]
            internal uint assetFileInfoCount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFileTable@@QAE@PAVAssetsFile@@_N@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr pFile, bool readNames);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AssetsFileTable@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1AssetsFileTable@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getAssetInfo@AssetsFileTable@@QAEPAVAssetFileInfoEx@@PBD@Z")]
            internal static extern global::System.IntPtr GetAssetInfo(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getAssetInfo@AssetsFileTable@@QAEPAVAssetFileInfoEx@@PBDK@Z")]
            internal static extern global::System.IntPtr GetAssetInfo(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string name, uint type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getAssetInfo@AssetsFileTable@@QAEPAVAssetFileInfoEx@@_K@Z")]
            internal static extern global::System.IntPtr GetAssetInfo_1(global::System.IntPtr instance, ulong pathId);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getAssetsFile@AssetsFileTable@@QAEPAVAssetsFile@@XZ")]
            internal static extern global::System.IntPtr GetAssetsFile(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getReader@AssetsFileTable@@QAEP6A_K_K0PAXJ@ZXZ")]
            internal static extern global::System.IntPtr GetReader(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?getReaderPar@AssetsFileTable@@QAEJXZ")]
            internal static extern int GetReaderPar(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.AssetsFileTable>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.AssetsFileTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileTable(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.AssetsFileTable __CreateInstance(global::UABESharp.AssetsFileTable.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.AssetsFileTable(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.AssetsFileTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileTable.__Internal));
            *(global::UABESharp.AssetsFileTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AssetsFileTable(global::UABESharp.AssetsFileTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AssetsFileTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AssetsFileTable(global::UABESharp.AssetsFile pFile, bool readNames)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(pFile, null) ? global::System.IntPtr.Zero : pFile.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, readNames);
        }

        public AssetsFileTable(global::UABESharp.AssetsFileTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.AssetsFileTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.AssetsFileTable.__Internal*) __Instance) = *((global::UABESharp.AssetsFileTable.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.AssetsFileTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::UABESharp.AssetFileInfoEx GetAssetInfo(string name)
        {
            var __ret = __Internal.GetAssetInfo((__Instance + __PointerAdjustment), name);
            global::UABESharp.AssetFileInfoEx __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetFileInfoEx.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetFileInfoEx) global::UABESharp.AssetFileInfoEx.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetFileInfoEx.__CreateInstance(__ret);
            return __result0;
        }

        public global::UABESharp.AssetFileInfoEx GetAssetInfo(string name, uint type)
        {
            var __ret = __Internal.GetAssetInfo((__Instance + __PointerAdjustment), name, type);
            global::UABESharp.AssetFileInfoEx __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetFileInfoEx.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetFileInfoEx) global::UABESharp.AssetFileInfoEx.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetFileInfoEx.__CreateInstance(__ret);
            return __result0;
        }

        public global::UABESharp.AssetFileInfoEx GetAssetInfo(ulong pathId)
        {
            var __ret = __Internal.GetAssetInfo_1((__Instance + __PointerAdjustment), pathId);
            global::UABESharp.AssetFileInfoEx __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::UABESharp.AssetFileInfoEx.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::UABESharp.AssetFileInfoEx) global::UABESharp.AssetFileInfoEx.NativeToManagedMap[__ret];
            else __result0 = global::UABESharp.AssetFileInfoEx.__CreateInstance(__ret);
            return __result0;
        }

        public global::UABESharp.AssetFileInfoEx PAssetFileInfo
        {
            get
            {
                global::UABESharp.AssetFileInfoEx __result0;
                if (((global::UABESharp.AssetsFileTable.__Internal*) __Instance)->pAssetFileInfo == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetFileInfoEx.NativeToManagedMap.ContainsKey(((global::UABESharp.AssetsFileTable.__Internal*) __Instance)->pAssetFileInfo))
                    __result0 = (global::UABESharp.AssetFileInfoEx) global::UABESharp.AssetFileInfoEx.NativeToManagedMap[((global::UABESharp.AssetsFileTable.__Internal*) __Instance)->pAssetFileInfo];
                else __result0 = global::UABESharp.AssetFileInfoEx.__CreateInstance(((global::UABESharp.AssetsFileTable.__Internal*) __Instance)->pAssetFileInfo);
                return __result0;
            }

            set
            {
                ((global::UABESharp.AssetsFileTable.__Internal*)__Instance)->pAssetFileInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint AssetFileInfoCount
        {
            get
            {
                return ((global::UABESharp.AssetsFileTable.__Internal*) __Instance)->assetFileInfoCount;
            }

            set
            {
                ((global::UABESharp.AssetsFileTable.__Internal*)__Instance)->assetFileInfoCount = value;
            }
        }

        public global::UABESharp.AssetsFile AssetsFile
        {
            get
            {
                var __ret = __Internal.GetAssetsFile((__Instance + __PointerAdjustment));
                global::UABESharp.AssetsFile __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.AssetsFile.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UABESharp.AssetsFile) global::UABESharp.AssetsFile.NativeToManagedMap[__ret];
                else __result0 = global::UABESharp.AssetsFile.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::UABESharp.AssetsFileReaderDelegate Reader
        {
            get
            {
                var __ret = __Internal.GetReader((__Instance + __PointerAdjustment));
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero? null : (global::UABESharp.AssetsFileReaderDelegate) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::UABESharp.AssetsFileReaderDelegate));
            }
        }

        public int ReaderPar
        {
            get
            {
                var __ret = __Internal.GetReaderPar((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class ResourceManagerPPtr : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int fileId;

            [FieldOffset(8)]
            internal long pathId;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ResourceManager_PPtr@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerPPtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerPPtr>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ResourceManagerPPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerPPtr(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ResourceManagerPPtr __CreateInstance(global::UABESharp.ResourceManagerPPtr.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerPPtr(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ResourceManagerPPtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerPPtr.__Internal));
            *(global::UABESharp.ResourceManagerPPtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ResourceManagerPPtr(global::UABESharp.ResourceManagerPPtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ResourceManagerPPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ResourceManagerPPtr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerPPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ResourceManagerPPtr(global::UABESharp.ResourceManagerPPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerPPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ResourceManagerPPtr.__Internal*) __Instance) = *((global::UABESharp.ResourceManagerPPtr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ResourceManagerPPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FileId
        {
            get
            {
                return ((global::UABESharp.ResourceManagerPPtr.__Internal*) __Instance)->fileId;
            }

            set
            {
                ((global::UABESharp.ResourceManagerPPtr.__Internal*)__Instance)->fileId = value;
            }
        }

        public long PathId
        {
            get
            {
                return ((global::UABESharp.ResourceManagerPPtr.__Internal*) __Instance)->pathId;
            }

            set
            {
                ((global::UABESharp.ResourceManagerPPtr.__Internal*)__Instance)->pathId = value;
            }
        }
    }

    public unsafe partial class ResourceManagerContainerData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal global::UABESharp.ResourceManagerPPtr.__Internal ids;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ResourceManager_ContainerData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerContainerData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerContainerData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ResourceManagerContainerData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerContainerData(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ResourceManagerContainerData __CreateInstance(global::UABESharp.ResourceManagerContainerData.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerContainerData(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ResourceManagerContainerData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerContainerData.__Internal));
            *(global::UABESharp.ResourceManagerContainerData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ResourceManagerContainerData(global::UABESharp.ResourceManagerContainerData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ResourceManagerContainerData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ResourceManagerContainerData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerContainerData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ResourceManagerContainerData(global::UABESharp.ResourceManagerContainerData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerContainerData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ResourceManagerContainerData.__Internal*) __Instance) = *((global::UABESharp.ResourceManagerContainerData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ResourceManagerContainerData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::UABESharp.ResourceManagerContainerData.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::UABESharp.ResourceManagerContainerData.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }

        public global::UABESharp.ResourceManagerPPtr Ids
        {
            get
            {
                return global::UABESharp.ResourceManagerPPtr.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ResourceManagerContainerData.__Internal*) __Instance)->ids));
            }

            set
            {
                ((global::UABESharp.ResourceManagerContainerData.__Internal*)__Instance)->ids = ReferenceEquals(value, null) ? new global::UABESharp.ResourceManagerPPtr.__Internal() : *(global::UABESharp.ResourceManagerPPtr.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ResourceManagerAssetDependencies : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::UABESharp.ResourceManagerPPtr.__Internal asset;

            [FieldOffset(16)]
            internal int dependencyCount;

            [FieldOffset(20)]
            internal global::System.IntPtr dependencies;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ResourceManager_AssetDependencies@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerAssetDependencies> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerAssetDependencies>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ResourceManagerAssetDependencies __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerAssetDependencies(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ResourceManagerAssetDependencies __CreateInstance(global::UABESharp.ResourceManagerAssetDependencies.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerAssetDependencies(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ResourceManagerAssetDependencies.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerAssetDependencies.__Internal));
            *(global::UABESharp.ResourceManagerAssetDependencies.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ResourceManagerAssetDependencies(global::UABESharp.ResourceManagerAssetDependencies.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ResourceManagerAssetDependencies(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ResourceManagerAssetDependencies()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerAssetDependencies.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ResourceManagerAssetDependencies(global::UABESharp.ResourceManagerAssetDependencies _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerAssetDependencies.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance) = *((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ResourceManagerAssetDependencies __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::UABESharp.ResourceManagerPPtr Asset
        {
            get
            {
                return global::UABESharp.ResourceManagerPPtr.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->asset));
            }

            set
            {
                ((global::UABESharp.ResourceManagerAssetDependencies.__Internal*)__Instance)->asset = ReferenceEquals(value, null) ? new global::UABESharp.ResourceManagerPPtr.__Internal() : *(global::UABESharp.ResourceManagerPPtr.__Internal*) value.__Instance;
            }
        }

        public int DependencyCount
        {
            get
            {
                return ((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->dependencyCount;
            }

            set
            {
                ((global::UABESharp.ResourceManagerAssetDependencies.__Internal*)__Instance)->dependencyCount = value;
            }
        }

        public global::UABESharp.ResourceManagerPPtr Dependencies
        {
            get
            {
                global::UABESharp.ResourceManagerPPtr __result0;
                if (((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->dependencies == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ResourceManagerPPtr.NativeToManagedMap.ContainsKey(((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->dependencies))
                    __result0 = (global::UABESharp.ResourceManagerPPtr) global::UABESharp.ResourceManagerPPtr.NativeToManagedMap[((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->dependencies];
                else __result0 = global::UABESharp.ResourceManagerPPtr.__CreateInstance(((global::UABESharp.ResourceManagerAssetDependencies.__Internal*) __Instance)->dependencies);
                return __result0;
            }

            set
            {
                ((global::UABESharp.ResourceManagerAssetDependencies.__Internal*)__Instance)->dependencies = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ResourceManagerFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte isModified;

            [FieldOffset(1)]
            internal byte isRead;

            [FieldOffset(4)]
            internal int unityVersion;

            [FieldOffset(8)]
            internal int containerArrayLen;

            [FieldOffset(12)]
            internal global::System.IntPtr containerArray;

            [FieldOffset(16)]
            internal int dependenciesArrayLen;

            [FieldOffset(20)]
            internal global::System.IntPtr assetDependency;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ResourceManagerFile@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ResourceManagerFile@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1ResourceManagerFile@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Read@ResourceManagerFile@@QAEXPAXHPAHH_N@Z")]
            internal static extern void Read(global::System.IntPtr instance, byte[] data, int dataLen, int* filePos, int assetsVersion, bool bigEndian);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Write@ResourceManagerFile@@QAE_NPAXHPAH@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Write(global::System.IntPtr instance, byte[] buffer, int bufferLen, int* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetModified@ResourceManagerFile@@QAEXXZ")]
            internal static extern void SetModified(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AddContainer@ResourceManagerFile@@QAEHPAUResourceManager_ContainerData@@@Z")]
            internal static extern int AddContainer(global::System.IntPtr instance, global::System.IntPtr cd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RemoveContainer@ResourceManagerFile@@QAEXH@Z")]
            internal static extern void RemoveContainer(global::System.IntPtr instance, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileSize@ResourceManagerFile@@QAEHXZ")]
            internal static extern int GetFileSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsModified@ResourceManagerFile@@QAE_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsModified(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.ResourceManagerFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.ResourceManagerFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.ResourceManagerFile __CreateInstance(global::UABESharp.ResourceManagerFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.ResourceManagerFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.ResourceManagerFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerFile.__Internal));
            *(global::UABESharp.ResourceManagerFile.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ResourceManagerFile(global::UABESharp.ResourceManagerFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ResourceManagerFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ResourceManagerFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        public ResourceManagerFile(global::UABESharp.ResourceManagerFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.ResourceManagerFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.ResourceManagerFile.__Internal*) __Instance) = *((global::UABESharp.ResourceManagerFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.ResourceManagerFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Read(byte[] data, int dataLen, ref int filePos, int assetsVersion, bool bigEndian)
        {
            fixed (int* __refParamPtr2 = &filePos)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Read((__Instance + __PointerAdjustment), data, dataLen, __arg2, assetsVersion, bigEndian);
            }
        }

        public bool Write(byte[] buffer, int bufferLen, ref int size)
        {
            fixed (int* __refParamPtr2 = &size)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.Write((__Instance + __PointerAdjustment), buffer, bufferLen, __arg2);
                return __ret;
            }
        }

        public void SetModified()
        {
            __Internal.SetModified((__Instance + __PointerAdjustment));
        }

        public int AddContainer(global::UABESharp.ResourceManagerContainerData cd)
        {
            var __arg0 = ReferenceEquals(cd, null) ? global::System.IntPtr.Zero : cd.__Instance;
            var __ret = __Internal.AddContainer((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public void RemoveContainer(int index)
        {
            __Internal.RemoveContainer((__Instance + __PointerAdjustment), index);
        }

        public int ContainerArrayLen
        {
            get
            {
                return ((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->containerArrayLen;
            }

            set
            {
                ((global::UABESharp.ResourceManagerFile.__Internal*)__Instance)->containerArrayLen = value;
            }
        }

        public global::UABESharp.ResourceManagerContainerData ContainerArray
        {
            get
            {
                global::UABESharp.ResourceManagerContainerData __result0;
                if (((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->containerArray == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ResourceManagerContainerData.NativeToManagedMap.ContainsKey(((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->containerArray))
                    __result0 = (global::UABESharp.ResourceManagerContainerData) global::UABESharp.ResourceManagerContainerData.NativeToManagedMap[((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->containerArray];
                else __result0 = global::UABESharp.ResourceManagerContainerData.__CreateInstance(((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->containerArray);
                return __result0;
            }

            set
            {
                ((global::UABESharp.ResourceManagerFile.__Internal*)__Instance)->containerArray = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int DependenciesArrayLen
        {
            get
            {
                return ((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->dependenciesArrayLen;
            }

            set
            {
                ((global::UABESharp.ResourceManagerFile.__Internal*)__Instance)->dependenciesArrayLen = value;
            }
        }

        public global::UABESharp.ResourceManagerAssetDependencies AssetDependency
        {
            get
            {
                global::UABESharp.ResourceManagerAssetDependencies __result0;
                if (((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->assetDependency == IntPtr.Zero) __result0 = null;
                else if (global::UABESharp.ResourceManagerAssetDependencies.NativeToManagedMap.ContainsKey(((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->assetDependency))
                    __result0 = (global::UABESharp.ResourceManagerAssetDependencies) global::UABESharp.ResourceManagerAssetDependencies.NativeToManagedMap[((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->assetDependency];
                else __result0 = global::UABESharp.ResourceManagerAssetDependencies.__CreateInstance(((global::UABESharp.ResourceManagerFile.__Internal*) __Instance)->assetDependency);
                return __result0;
            }

            set
            {
                ((global::UABESharp.ResourceManagerFile.__Internal*)__Instance)->assetDependency = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int FileSize
        {
            get
            {
                var __ret = __Internal.GetFileSize((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsModified
        {
            get
            {
                var __ret = __Internal.IsModified((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public enum TextureFormat
    {
        TexFmtAlpha8 = 1,
        TexFmtARGB4444 = 2,
        TexFmtRGB24 = 3,
        TexFmtRGBA32 = 4,
        TexFmtARGB32 = 5,
        TexFmtUNUSED06 = 6,
        TexFmtRGB565 = 7,
        TexFmtUNUSED08 = 8,
        TexFmtR16 = 9,
        TexFmtDXT1 = 10,
        TexFmtUNUSED11 = 11,
        TexFmtDXT5 = 12,
        TexFmtRGBA4444 = 13,
        TexFmtBGRA32New = 14,
        TexFmtRHalf = 15,
        TexFmtRGHalf = 16,
        TexFmtRGBAHalf = 17,
        TexFmtRFloat = 18,
        TexFmtRGFloat = 19,
        TexFmtRGBAFloat = 20,
        TexFmtYUV2 = 21,
        TexFmtUNUSED22 = 22,
        TexFmtUNUSED23 = 23,
        TexFmtBC6H = 24,
        TexFmtBC7 = 25,
        TexFmtBC4 = 26,
        TexFmtBC5 = 27,
        TexFmtDXT1Crunched = 28,
        TexFmtDXT5Crunched = 29,
        TexFmtPVRTC_RGB2 = 30,
        TexFmtPVRTC_RGBA2 = 31,
        TexFmtPVRTC_RGB4 = 32,
        TexFmtPVRTC_RGBA4 = 33,
        TexFmtETC_RGB4 = 34,
        TexFmtATC_RGB4 = 35,
        TexFmtATC_RGBA8 = 36,
        TexFmtBGRA32Old = 37,
        TexFMT_UNUSED38 = 38,
        TexFMT_UNUSED39 = 39,
        TexFMT_UNUSED40 = 40,
        TexFmtEAC_R = 41,
        TexFmtEAC_R_SIGNED = 42,
        TexFmtEAC_RG = 43,
        TexFmtEAC_RG_SIGNED = 44,
        TexFmtETC2RGB4 = 45,
        TexFmtETC2RGBA1 = 46,
        TexFmtETC2RGBA8 = 47,
        TexFmtASTC_RGB_4x4 = 48,
        TexFmtASTC_RGB_5x5 = 49,
        TexFmtASTC_RGB_6x6 = 50,
        TexFmtASTC_RGB_8x8 = 51,
        TexFmtASTC_RGB_10x10 = 52,
        TexFmtASTC_RGB_12x12 = 53,
        TexFmtASTC_RGBA_4x4 = 54,
        TexFmtASTC_RGBA_5x5 = 55,
        TexFmtASTC_RGBA_6x6 = 56,
        TexFmtASTC_RGBA_8x8 = 57,
        TexFmtASTC_RGBA_10x10 = 58,
        TexFmtASTC_RGBA_12x12 = 59,
        TexFmtETC_RGB4_3DS = 60,
        TexFmtETC_RGBA8_3DS = 61
    }

    public unsafe partial class TextureFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_Name;

            [FieldOffset(4)]
            internal uint m_Width;

            [FieldOffset(8)]
            internal uint m_Height;

            [FieldOffset(12)]
            internal uint m_CompleteImageSize;

            [FieldOffset(16)]
            internal uint m_TextureFormat;

            [FieldOffset(20)]
            internal int m_MipCount;

            [FieldOffset(24)]
            internal byte m_MipMap;

            [FieldOffset(25)]
            internal byte m_IsReadable;

            [FieldOffset(26)]
            internal byte m_ReadAllowed;

            [FieldOffset(27)]
            internal byte padding1;

            [FieldOffset(28)]
            internal int m_ImageCount;

            [FieldOffset(32)]
            internal int m_TextureDimension;

            [FieldOffset(36)]
            internal global::UABESharp.TextureFile.GLTextureSettings.__Internal m_TextureSettings;

            [FieldOffset(52)]
            internal int m_LightmapFormat;

            [FieldOffset(56)]
            internal int m_ColorSpace;

            [FieldOffset(60)]
            internal uint _pictureDataSize;

            [FieldOffset(64)]
            internal global::System.IntPtr pPictureData;

            [FieldOffset(68)]
            internal global::UABESharp.TextureFile.StreamingInfo.__Internal m_StreamData;

            [FieldOffset(80)]
            internal global::System.IntPtr pictureData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TextureFile@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public unsafe partial class GLTextureSettings : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal int m_FilterMode;

                [FieldOffset(4)]
                internal int m_Aniso;

                [FieldOffset(8)]
                internal float m_MipBias;

                [FieldOffset(12)]
                internal int m_WrapMode;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0GLTextureSettings@TextureFile@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile.GLTextureSettings> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile.GLTextureSettings>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::UABESharp.TextureFile.GLTextureSettings __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UABESharp.TextureFile.GLTextureSettings(native.ToPointer(), skipVTables);
            }

            internal static global::UABESharp.TextureFile.GLTextureSettings __CreateInstance(global::UABESharp.TextureFile.GLTextureSettings.__Internal native, bool skipVTables = false)
            {
                return new global::UABESharp.TextureFile.GLTextureSettings(native, skipVTables);
            }

            private static void* __CopyValue(global::UABESharp.TextureFile.GLTextureSettings.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.GLTextureSettings.__Internal));
                *(global::UABESharp.TextureFile.GLTextureSettings.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private GLTextureSettings(global::UABESharp.TextureFile.GLTextureSettings.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected GLTextureSettings(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public GLTextureSettings()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.GLTextureSettings.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public GLTextureSettings(global::UABESharp.TextureFile.GLTextureSettings _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.GLTextureSettings.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) __Instance) = *((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UABESharp.TextureFile.GLTextureSettings __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public int MFilterMode
            {
                get
                {
                    return ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) __Instance)->m_FilterMode;
                }

                set
                {
                    ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*)__Instance)->m_FilterMode = value;
                }
            }

            public int MAniso
            {
                get
                {
                    return ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) __Instance)->m_Aniso;
                }

                set
                {
                    ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*)__Instance)->m_Aniso = value;
                }
            }

            public float MMipBias
            {
                get
                {
                    return ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) __Instance)->m_MipBias;
                }

                set
                {
                    ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*)__Instance)->m_MipBias = value;
                }
            }

            public int MWrapMode
            {
                get
                {
                    return ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*) __Instance)->m_WrapMode;
                }

                set
                {
                    ((global::UABESharp.TextureFile.GLTextureSettings.__Internal*)__Instance)->m_WrapMode = value;
                }
            }
        }

        public unsafe partial class StreamingInfo : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint offset;

                [FieldOffset(4)]
                internal uint size;

                [FieldOffset(8)]
                internal global::System.IntPtr path;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UABE_2_1d_x86", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0StreamingInfo@TextureFile@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile.StreamingInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile.StreamingInfo>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::UABESharp.TextureFile.StreamingInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UABESharp.TextureFile.StreamingInfo(native.ToPointer(), skipVTables);
            }

            internal static global::UABESharp.TextureFile.StreamingInfo __CreateInstance(global::UABESharp.TextureFile.StreamingInfo.__Internal native, bool skipVTables = false)
            {
                return new global::UABESharp.TextureFile.StreamingInfo(native, skipVTables);
            }

            private static void* __CopyValue(global::UABESharp.TextureFile.StreamingInfo.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.StreamingInfo.__Internal));
                *(global::UABESharp.TextureFile.StreamingInfo.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private StreamingInfo(global::UABESharp.TextureFile.StreamingInfo.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected StreamingInfo(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public StreamingInfo()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.StreamingInfo.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public StreamingInfo(global::UABESharp.TextureFile.StreamingInfo _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.StreamingInfo.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UABESharp.TextureFile.StreamingInfo.__Internal*) __Instance) = *((global::UABESharp.TextureFile.StreamingInfo.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UABESharp.TextureFile.StreamingInfo __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint Offset
            {
                get
                {
                    return ((global::UABESharp.TextureFile.StreamingInfo.__Internal*) __Instance)->offset;
                }

                set
                {
                    ((global::UABESharp.TextureFile.StreamingInfo.__Internal*)__Instance)->offset = value;
                }
            }

            public uint Size
            {
                get
                {
                    return ((global::UABESharp.TextureFile.StreamingInfo.__Internal*) __Instance)->size;
                }

                set
                {
                    ((global::UABESharp.TextureFile.StreamingInfo.__Internal*)__Instance)->size = value;
                }
            }

            public sbyte* Path
            {
                get
                {
                    return (sbyte*) ((global::UABESharp.TextureFile.StreamingInfo.__Internal*) __Instance)->path;
                }

                set
                {
                    ((global::UABESharp.TextureFile.StreamingInfo.__Internal*)__Instance)->path = (global::System.IntPtr) value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UABESharp.TextureFile>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::UABESharp.TextureFile __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::UABESharp.TextureFile(native.ToPointer(), skipVTables);
        }

        internal static global::UABESharp.TextureFile __CreateInstance(global::UABESharp.TextureFile.__Internal native, bool skipVTables = false)
        {
            return new global::UABESharp.TextureFile(native, skipVTables);
        }

        private static void* __CopyValue(global::UABESharp.TextureFile.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.__Internal));
            *(global::UABESharp.TextureFile.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextureFile(global::UABESharp.TextureFile.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextureFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TextureFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TextureFile(global::UABESharp.TextureFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::UABESharp.TextureFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::UABESharp.TextureFile.__Internal*) __Instance) = *((global::UABESharp.TextureFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::UABESharp.TextureFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* MName
        {
            get
            {
                return (sbyte*) ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_Name;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_Name = (global::System.IntPtr) value;
            }
        }

        public uint MWidth
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_Width;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_Width = value;
            }
        }

        public uint MHeight
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_Height;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_Height = value;
            }
        }

        public uint MCompleteImageSize
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_CompleteImageSize;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_CompleteImageSize = value;
            }
        }

        public uint MTextureFormat
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_TextureFormat;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_TextureFormat = value;
            }
        }

        public int MMipCount
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_MipCount;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_MipCount = value;
            }
        }

        public bool MMipMap
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_MipMap != 0;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_MipMap = (byte) (value ? 1 : 0);
            }
        }

        public bool MIsReadable
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_IsReadable != 0;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_IsReadable = (byte) (value ? 1 : 0);
            }
        }

        public bool MReadAllowed
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_ReadAllowed != 0;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_ReadAllowed = (byte) (value ? 1 : 0);
            }
        }

        public bool Padding1
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->padding1 != 0;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->padding1 = (byte) (value ? 1 : 0);
            }
        }

        public int MImageCount
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_ImageCount;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_ImageCount = value;
            }
        }

        public int MTextureDimension
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_TextureDimension;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_TextureDimension = value;
            }
        }

        public global::UABESharp.TextureFile.GLTextureSettings MTextureSettings
        {
            get
            {
                return global::UABESharp.TextureFile.GLTextureSettings.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.TextureFile.__Internal*) __Instance)->m_TextureSettings));
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_TextureSettings = ReferenceEquals(value, null) ? new global::UABESharp.TextureFile.GLTextureSettings.__Internal() : *(global::UABESharp.TextureFile.GLTextureSettings.__Internal*) value.__Instance;
            }
        }

        public int MLightmapFormat
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_LightmapFormat;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_LightmapFormat = value;
            }
        }

        public int MColorSpace
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->m_ColorSpace;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_ColorSpace = value;
            }
        }

        public uint PictureDataSize
        {
            get
            {
                return ((global::UABESharp.TextureFile.__Internal*) __Instance)->_pictureDataSize;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->_pictureDataSize = value;
            }
        }

        public byte* PPictureData
        {
            get
            {
                return (byte*) ((global::UABESharp.TextureFile.__Internal*) __Instance)->pPictureData;
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->pPictureData = (global::System.IntPtr) value;
            }
        }

        public global::UABESharp.TextureFile.StreamingInfo MStreamData
        {
            get
            {
                return global::UABESharp.TextureFile.StreamingInfo.__CreateInstance(new global::System.IntPtr(&((global::UABESharp.TextureFile.__Internal*) __Instance)->m_StreamData));
            }

            set
            {
                ((global::UABESharp.TextureFile.__Internal*)__Instance)->m_StreamData = ReferenceEquals(value, null) ? new global::UABESharp.TextureFile.StreamingInfo.__Internal() : *(global::UABESharp.TextureFile.StreamingInfo.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class TextureFileFormat
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ReadTextureFile@@YA_NPAUTextureFile@@PAVAssetTypeValueField@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureFile(global::System.IntPtr pOutTex, global::System.IntPtr pBaseField);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?WriteTextureFile@@YA_KPAUTextureFile@@PAVAssetTypeTemplateField@@P6A_K_K2PBXJ@ZJ@Z")]
            internal static extern ulong WriteTextureFile(global::System.IntPtr pInTex, global::System.IntPtr pBaseTemplate, global::System.IntPtr writer, int writerPar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTextureData@@YA_NPAUTextureFile@@PAX@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetTextureData(global::System.IntPtr pTex, byte[] pOutBuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCompressedTextureDataSize@@YAIHHW4TextureFormat@@@Z")]
            internal static extern uint GetCompressedTextureDataSize(int width, int height, global::UABESharp.TextureFormat texFmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCompressedTextureDataSizeCrunch@@YAIPAUTextureFile@@@Z")]
            internal static extern uint GetCompressedTextureDataSizeCrunch(global::System.IntPtr pTex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("AssetsTools", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MakeTextureData@@YA_NPAUTextureFile@@PAX_NH@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MakeTextureData(global::System.IntPtr pTex, byte[] pRGBA32Buf, bool rotate180, int compressQuality);
        }

        public static bool ReadTextureFile(global::UABESharp.TextureFile pOutTex, global::UABESharp.AssetTypeValueField pBaseField)
        {
            var __arg0 = ReferenceEquals(pOutTex, null) ? global::System.IntPtr.Zero : pOutTex.__Instance;
            var __arg1 = ReferenceEquals(pBaseField, null) ? global::System.IntPtr.Zero : pBaseField.__Instance;
            var __ret = __Internal.ReadTextureFile(__arg0, __arg1);
            return __ret;
        }

        public static ulong WriteTextureFile(global::UABESharp.TextureFile pInTex, global::UABESharp.AssetTypeTemplateField pBaseTemplate, global::UABESharp.AssetsFileWriterDelegate writer, int writerPar)
        {
            var __arg0 = ReferenceEquals(pInTex, null) ? global::System.IntPtr.Zero : pInTex.__Instance;
            var __arg1 = ReferenceEquals(pBaseTemplate, null) ? global::System.IntPtr.Zero : pBaseTemplate.__Instance;
            var __arg2 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var __ret = __Internal.WriteTextureFile(__arg0, __arg1, __arg2, writerPar);
            return __ret;
        }

        public static bool GetTextureData(global::UABESharp.TextureFile pTex, byte[] pOutBuf)
        {
            var __arg0 = ReferenceEquals(pTex, null) ? global::System.IntPtr.Zero : pTex.__Instance;
            var __ret = __Internal.GetTextureData(__arg0, pOutBuf);
            return __ret;
        }

        public static uint GetCompressedTextureDataSize(int width, int height, global::UABESharp.TextureFormat texFmt)
        {
            var __ret = __Internal.GetCompressedTextureDataSize(width, height, texFmt);
            return __ret;
        }

        public static uint GetCompressedTextureDataSizeCrunch(global::UABESharp.TextureFile pTex)
        {
            var __arg0 = ReferenceEquals(pTex, null) ? global::System.IntPtr.Zero : pTex.__Instance;
            var __ret = __Internal.GetCompressedTextureDataSizeCrunch(__arg0);
            return __ret;
        }

        public static bool MakeTextureData(global::UABESharp.TextureFile pTex, byte[] pRGBA32Buf, bool rotate180, int compressQuality)
        {
            var __arg0 = ReferenceEquals(pTex, null) ? global::System.IntPtr.Zero : pTex.__Instance;
            var __ret = __Internal.MakeTextureData(__arg0, pRGBA32Buf, rotate180, compressQuality);
            return __ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate ushort Func_ushort_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate long Func_long_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr_int(global::System.IntPtr _0, int _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate ulong Func_ulong_IntPtr_IntPtr_intPtr_ulongPtr(global::System.IntPtr _0, global::System.IntPtr _1, int* _2, ulong* _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_int(global::System.IntPtr _0, global::System.IntPtr _1, int _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_int(global::System.IntPtr _0, int _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_string_uint(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPStr)] string _1, uint _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal unsafe delegate bool Func_bool_IntPtr_string_ulong_ulong_IntPtr_intPtr(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPStr)] string _1, ulong _2, ulong _3, global::System.IntPtr _4, int* _5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_int(global::System.IntPtr _0, int _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal unsafe delegate bool Func_bool_IntPtr_IntPtr_int_IntPtr_ushort(global::System.IntPtr _0, global::System.IntPtr _1, int _2, global::System.IntPtr _3, ushort _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr_IntPtr_string(global::System.IntPtr _0, global::System.IntPtr _1, [MarshalAs(UnmanagedType.LPStr)] string _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_int_sbytePtr_uint(global::System.IntPtr _0, global::System.IntPtr _1, int _2, sbyte* _3, uint _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_int_charPtr_uint(global::System.IntPtr _0, global::System.IntPtr _1, int _2, char* _3, uint _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_charPtrPtr(global::System.IntPtr _0, char** _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_sbytePtrPtr(global::System.IntPtr _0, sbyte** _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate sbyte* Func_sbytePtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string(global::System.IntPtr _0, sbyte* _1, [MarshalAs(UnmanagedType.LPStr)] string _2, int _3, long _4, sbyte** _5, uint _6, uint _7, [MarshalAs(UnmanagedType.LPStr)] string _8);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate char* Func_charPtr_IntPtr_sbytePtr_string_int_long_sbytePtrPtr_uint_uint_string(global::System.IntPtr _0, sbyte* _1, [MarshalAs(UnmanagedType.LPStr)] string _2, int _3, long _4, sbyte** _5, uint _6, uint _7, [MarshalAs(UnmanagedType.LPStr)] string _8);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_string_string(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPStr)] string _1, [MarshalAs(UnmanagedType.LPStr)] string _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr_IntPtr_string_string(global::System.IntPtr _0, global::System.IntPtr _1, [MarshalAs(UnmanagedType.LPStr)] string _2, [MarshalAs(UnmanagedType.LPStr)] string _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::UABESharp.AssetsReplacementType Func_UABE_2_1d_x86_AssetsReplacementType_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate uint Func_uint_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate ulong Func_ulong_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate ulong Func_ulong_IntPtr_ulong_IntPtr_int(global::System.IntPtr _0, ulong _1, global::System.IntPtr _2, int _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::UABESharp.BundleReplacementType Func_UABE_2_1d_x86_BundleReplacementType_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal unsafe delegate bool Func_bool_IntPtr_IntPtr_IntPtr_int_ulong_ulong_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, int _3, ulong _4, ulong _5, global::System.IntPtr _6);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal unsafe delegate bool Func_bool_IntPtr(global::System.IntPtr _0);
    }
}
